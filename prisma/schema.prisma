generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  customerType   CustomerType
  name           String
  phone          String        @unique
  email          String?       @unique
  image          String?
  country        String
  address        String
  address_2      String?
  website        String?
  maxCreditLimit Float?
  maxCreditDays  Int?
  salesAmount    Float?        @default(0)
  paidAmount     Float?        @default(0)
  balanceAmount  Float?        @default(0)
  contactPerson  String?
  contact_phone  String?
  contact_email  String?
  taxPin         String?
  regNumber      String?
  paymentTerms   String?
  NIN            String?
  salesPersonId  String?       @db.ObjectId
  salesPerson    SalesPerson?  @relation(fields: [salesPersonId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  salesHeaders   SalesHeader[]
}

model SalesPerson {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  code        String        @unique
  name        String
  phone       String        @unique
  email       String?       @unique
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Customer    Customer[]
  SalesHeader SalesHeader[]
}

enum CustomerType {
  RETAIL
  WHOLESALE
  DISTRIBUTOR
  FOREIGN
  ONLINE
  OTHER
}

model User {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  email            String        @unique
  username         String        @unique
  password         String
  firstName        String
  lastName         String
  phone            String        @unique
  dob              DateTime?
  gender           Gender
  image            String?
  role             Role          @default(ATTENDANT)
  isVerfied        Boolean       @default(false)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  shops            Shop[]
  salesHeaders     SalesHeader[]
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  ATTENDANT
  ONLINE_SALESS
}

model Shop {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  slug           String           @unique
  location       String
  adminId        String           @db.ObjectId
  admin          User             @relation(fields: [adminId], references: [id])
  attendantIds   String[]         @db.ObjectId
  Products       Product[]
  salesHeaders   SalesHeader[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Expense        Expense[]
  AdjustmentLine AdjustmentLine[]
}

model Supplier {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  supplierType      SupplierType
  name              String
  contactPerson     String
  phone             String       @unique
  email             String?      @unique
  country           String
  location          String
  website           String?
  taxPin            String?
  regNumber         String?      @unique
  bankAccountNumber String?
  bankName          String?
  paymentTerms      String?
  totalAmount       Float?       @default(0)
  paidAmount        Float?       @default(0)
  balanceAmount     Float?       @default(0)
  logo              String?      @default("https://utfs.io/f/7d3eb071-433f-47e9-b962-7de707bdbeb2-uwz78d.png")
  rating            Float?
  note              String?
  products          Product[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

enum SupplierType {
  MANUFACTURER
  DISTRIBUTIOR
  WHOLESALER
  RETAILER
  OTHER
}

model Unit {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  abbreviation   String
  slug           String           @unique
  products       Product[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  AdjustmentLine AdjustmentLine[]
  StockHistory   StockHistory[]
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  sku              String            @unique
  productCode      String            @unique
  slug             String            @unique
  expiryDate       DateTime?         @default("2024-08-30T20:11:57.173Z")
  alertQty         Int
  unitPrice        Float
  wholeSalePrice   Float?            @default(0)
  unitCost         Float?
  batchNo          String?
  featured         Boolean?
  productContent   String?
  taxMethod        String?
  productTax       Float?
  stockQty         Float?
  barCode          String?           @unique
  status           ProductStatus     @default(ACTIVE)
  Unit             Unit?             @relation(fields: [unitId], references: [id])
  unitId           String?           @db.ObjectId
  Shop             Shop?             @relation(fields: [shopId], references: [id])
  shopId           String?           @default("66c5ea9361d22bb4f6af4e2b") @db.ObjectId
  Brand            Brand?            @relation(fields: [brandId], references: [id])
  brandId          String?           @db.ObjectId
  Category         Category?         @relation(fields: [categoryId], references: [id])
  categoryId       String?           @db.ObjectId
  Supplier         Supplier?         @relation(fields: [supplierId], references: [id])
  supplierId       String?           @db.ObjectId
  media            Media[]
  seoMeta          SeoMeta[]
  productVariants  ProductVariant[]
  warehouseStocks  WarehouseStock[]
  stockHistories   StockHistory[]
  productRelations ProductRelation[]
  discounts        Discount[]
  tags             ProductTag[]
  versions         ProductVersion[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  salesLines       SalesLine[]
  AdjustmentLine   AdjustmentLine[]
}

model Media {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  productId String    @db.ObjectId
  url       String
  type      MediaType
  altText   String?
  position  Int?
  product   Product   @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}

model SeoMeta {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  productId       String   @db.ObjectId
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  product         Product  @relation(fields: [productId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ProductVariant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  sku         String   @unique
  variantName String
  stockQty    Float?
  unitPrice   Float
  unitCost    Float?
  barCode     String?  @unique
  product     Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WarehouseStock {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  warehouseId String   @db.ObjectId
  productId   String   @db.ObjectId
  stockQty    Float?
  alertQty    Int?
  product     Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StockHistory {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  entryType        StockEntryType?
  postingDate      DateTime
  documentType     DocumentType?
  documentNo       String?
  productId        String          @db.ObjectId
  productName      String
  productCode      String
  productSku       String
  description      String?
  locationCode     String?
  quantity         Float
  invoicedQty      Float?          @default(0)
  remainingQty     Float?          @default(0)
  unitId           String?         @db.ObjectId
  unitName         String?
  unitAbbreviation String?
  unitCost         Float?          @default(0)
  totalCost        Float?          @default(0)
  unitAmount       Float?          @default(0)
  totalAmount      Float?          @default(0)
  salesAmount      Float?          @default(0)
  costAmount       Float?          @default(0)
  open             Boolean         @default(true)
  entryNo          Int             @default(0)
  product          Product         @relation(fields: [productId], references: [id])
  unit             Unit?           @relation(fields: [unitId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum StockEntryType {
  PURCHASE
  SALE
  POSITIVE_ADJUST
  NEGATIVE_ADJUST
  TRANSFER
  CONSUMPTION
  OUTPUT
  ASSEMBLY_CONSUMPTION
  ASSEMBLY_OUTPUT
  NONE
}

enum DocumentType {
  SALES_SHIPMENT
  SALES_INVOICE
  SALES_RETURN_RECEIPT
  SALES_CREDIT_MEMO
  PURCHASE_RECEIPT
  PURCHASE_INVOICE
  PURCHASE_RETURN_SHIPMENT
  PURCHASE_CREDIT_MEMO
  TRANSFER_SHIPMENT
  TRANSFER_RECEIPT
  SERVICE_SHIPMENT
  SERVICE_INVOICE
  SERVICE_CREDIT_MEMO
  POSTED_ASSEMBLY
  INVENTORY_RECEIPT
  INVENTORY_SHIPMENT
  DIRECT_TRANSFER
}

model ProductRelation {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  productId        String   @db.ObjectId
  relatedProductId String   @db.ObjectId
  relationType     String // Upsell, Cross-sell, etc.
  product          Product  @relation(fields: [productId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Discount {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  productId          String   @db.ObjectId
  discountPercentage Float
  startDate          DateTime
  endDate            DateTime
  active             Boolean  @default(true)
  product            Product  @relation(fields: [productId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model ProductTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  tagName   String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVersion {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  version   Int
  changes   Json
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

model SalesHeader {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  customerId      String         @db.ObjectId
  customerName    String?
  customerPhone   String?
  customerEmail   String?
  orderNumber     String?
  orderDate       DateTime       @default(now())
  orderDueDate    DateTime?      @default(now())
  postingDate     DateTime?      @default(now())
  orderStatus     OrderStatus
  orderType       OrderType
  orderNote       String?
  orderAmount     Float
  orderDiscount   Float?
  orderTax        Float?
  orderTotal      Float
  orderPaidAmount Float?
  orderDueAmount  Float?
  paymentMethod   PaymentMethod?
  salesLines      SalesLine[]
  orderPayments   OrderPayment[]
  salesPersonId   String?        @db.ObjectId
  salesPerson     SalesPerson?   @relation(fields: [salesPersonId], references: [id])
  Shop            Shop?          @relation(fields: [shopId], references: [id])
  shopId          String?        @db.ObjectId
  attendantId     String?        @db.ObjectId
  attendant       User?          @relation(fields: [attendantId], references: [id])
  customer        Customer?      @relation(fields: [customerId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model SalesLine {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  salesHeaderId String      @db.ObjectId
  productId     String      @db.ObjectId
  productName   String
  productCode   String
  productSku    String
  productImage  String
  quantity      Int
  price         Float
  lineDiscount  Float?
  lineTax       Float?
  total         Float
  salesHeader   SalesHeader @relation(fields: [salesHeaderId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
  CHEQUE
  BANK_TRANSFER
  CREDIT
}

model OrderPayment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  salesHeaderId String        @db.ObjectId
  amount        Float
  paymentMethod PaymentMethod
  paymentDate   DateTime?
  salesHeader   SalesHeader   @relation(fields: [salesHeaderId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OrderType {
  ONLINE
  OFFLINE
  BOTH
}

model Expense {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  amount            Float
  date              DateTime         @default(now())
  description       String?
  attachments       String[]
  shopId            String           @db.ObjectId
  expenseCategoryId String?          @db.ObjectId
  payeeId           String?          @db.ObjectId
  shop              Shop             @relation(fields: [shopId], references: [id])
  ExpenseCategory   ExpenseCategory? @relation(fields: [expenseCategoryId], references: [id])
  Payee             Payee?           @relation(fields: [payeeId], references: [id])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ExpenseCategory {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Payee {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String    @unique
  email     String?
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum NotificationType {
  INFO
  WARNING
  ERROR
}

enum NotificationStatus {
  UNREAD
  READ
}

model Notification {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Adjustment {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  referenceNo     String             @unique
  date            DateTime           @default(now())
  description     String?
  activity        AdjustmentActivity
  adjustmentLines AdjustmentLine[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model AdjustmentLine {
  id           String                  @id @default(auto()) @map("_id") @db.ObjectId
  postingDate  DateTime                @default(now())
  entryType    AdjustmentItemEntryType
  documentNo   String
  adjustmentId String                  @db.ObjectId
  productId    String                  @db.ObjectId
  productName  String
  productCode  String
  productSku   String
  shopId       String                  @db.ObjectId
  quantity     Int
  unitId       String                  @db.ObjectId
  reason       AdjustmentItemReason
  unitAmount   Float?
  totalAmount  Float?
  unitCost     Float?
  totalCost    Float?
  entryNo      Int                     @default(0)
  adjustment   Adjustment              @relation(fields: [adjustmentId], references: [id])
  product      Product                 @relation(fields: [productId], references: [id])
  shop         Shop?                   @relation(fields: [shopId], references: [id])
  unit         Unit                    @relation(fields: [unitId], references: [id])
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
}

enum AdjustmentItemEntryType {
  PURCHASE
  SALE
  POSITIVE_ADJUST
  NEGATIVE_ADJUST
}

enum AdjustmentItemReason {
  EXPIRED_ITEM
  STOLEN_ITEM
  RETURNED_ITEM
  DAMAGED_ITEM
  OTHER
}

enum AdjustmentActivity {
  INVENTORY_COUNT
  INVENTORY_ADJUSTMENT
  INVENTORY_TRANSFER
  INVENTORY_CONSUMPTION
  INVENTORY_OUTPUT
  INVENTORY_ASSEMBLY_CONSUMPTION
  INVENTORY_ASSEMBLY_OUTPUT
}
