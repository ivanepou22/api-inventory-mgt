generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id                       String                @id @default(auto()) @map("_id") @db.ObjectId
  customerType             CustomerType
  name                     String
  phone                    String                @unique
  email                    String?               @unique
  image                    String?
  country                  String
  address                  String
  address_2                String?
  website                  String?
  maxCreditLimit           Float?
  maxCreditDays            Int?
  salesAmount              Float?                @default(0)
  paidAmount               Float?                @default(0)
  balanceAmount            Float?                @default(0)
  contactPerson            String?
  contact_phone            String?
  contact_email            String?
  taxPin                   String?
  regNumber                String?
  paymentTerms             String?
  NIN                      String?
  customerPostingGroupId   String?               @db.ObjectId
  customerPostingGroupCode String?
  customerPostingGroupName String?
  genBusPostingGroupId     String?               @db.ObjectId
  genBusPostingGroupCode   String?
  genBusPostingGroupName   String?
  vatBusPostingGroupId     String?               @db.ObjectId
  vatBusPostingGroupCode   String?
  vatBusPostingGroupName   String?
  salesPersonId            String?               @db.ObjectId
  salesPerson              SalesPerson?          @relation(fields: [salesPersonId], references: [id])
  customerPostingGroup     CustomerPostingGroup? @relation(fields: [customerPostingGroupId], references: [id])
  genBusPostingGroup       GenBusPostingGroup?   @relation(fields: [genBusPostingGroupId], references: [id])
  vatBusPostingGroup       VatBusPostingGroup?   @relation(fields: [vatBusPostingGroupId], references: [id])
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  salesHeaders             SalesHeader[]
}

model SalesPerson {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  code        String        @unique
  name        String
  phone       String        @unique
  email       String?       @unique
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Customer    Customer[]
  SalesHeader SalesHeader[]
}

enum CustomerType {
  RETAIL
  WHOLESALE
  DISTRIBUTOR
  FOREIGN
  ONLINE
  OTHER
}

model User {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  email            String        @unique
  username         String        @unique
  password         String
  firstName        String
  lastName         String
  phone            String        @unique
  dob              DateTime?
  gender           Gender
  image            String?
  role             Role          @default(ATTENDANT)
  isVerfied        Boolean       @default(false)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  shops            Shop[]
  salesHeaders     SalesHeader[]
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  ATTENDANT
  ONLINE_SALESS
}

model Shop {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  slug                  String                  @unique
  location              String
  adminId               String                  @db.ObjectId
  admin                 User                    @relation(fields: [adminId], references: [id])
  attendantIds          String[]                @db.ObjectId
  Products              Product[]
  salesHeaders          SalesHeader[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  Expense               Expense[]
  AdjustmentLine        AdjustmentLine[]
  PurchaseHeader        PurchaseHeader[]
  PurchaseLine          PurchaseLine[]
  PurchaseReceiptHeader PurchaseReceiptHeader[]
  PurchaseRecieptLine   PurchaseRecieptLine[]
  InventoryPostingSetup InventoryPostingSetup[]
}

model Supplier {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  supplierType           SupplierType
  name                   String
  contactPerson          String
  phone                  String                  @unique
  email                  String?                 @unique
  country                String
  location               String
  website                String?
  taxPin                 String?
  regNumber              String?                 @unique
  bankAccountNumber      String?
  bankName               String?
  paymentTerms           String?
  totalAmount            Float?                  @default(0)
  paidAmount             Float?                  @default(0)
  balanceAmount          Float?                  @default(0)
  logo                   String?                 @default("https://utfs.io/f/7d3eb071-433f-47e9-b962-7de707bdbeb2-uwz78d.png")
  rating                 Float?
  note                   String?
  vendorPostingGroupId   String?                 @db.ObjectId
  vendorPostingGroupCode String?
  vendorPostingGroupName String?
  genBusPostingGroupId   String?                 @db.ObjectId
  genBusPostingGroupCode String?
  genBusPostingGroupName String?
  vatBusPostingGroupId   String?                 @db.ObjectId
  vatBusPostingGroupCode String?
  vatBusPostingGroupName String?
  products               Product[]
  PurchaseHeader         PurchaseHeader[]
  SupplierLedgerEntry    SupplierLedgerEntry[]
  PurchaseReceiptHeader  PurchaseReceiptHeader[]
  PurchaseLine           PurchaseLine[]
  PurchaseRecieptLine    PurchaseRecieptLine[]
  vendorPostingGroup     VendorPostingGroup?     @relation(fields: [vendorPostingGroupId], references: [id])
  genBusPostingGroup     GenBusPostingGroup?     @relation(fields: [genBusPostingGroupId], references: [id])
  vatBusPostingGroup     VatBusPostingGroup?     @relation(fields: [vatBusPostingGroupId], references: [id])
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
}

enum SupplierType {
  MANUFACTURER
  DISTRIBUTIOR
  WHOLESALER
  RETAILER
  OTHER
}

model Unit {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  abbreviation        String
  slug                String                @unique
  products            Product[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  AdjustmentLine      AdjustmentLine[]
  StockHistory        StockHistory[]
  PurchaseLine        PurchaseLine[]
  PurchaseRecieptLine PurchaseRecieptLine[]
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id                             String                      @id @default(auto()) @map("_id") @db.ObjectId
  name                           String
  description                    String?
  sku                            String                      @unique
  productCode                    String                      @unique
  slug                           String                      @unique
  expiryDate                     DateTime?                   @default("2024-08-30T20:11:57.173Z")
  alertQty                       Int
  unitPrice                      Float
  wholeSalePrice                 Float?                      @default(0)
  unitCost                       Float?
  batchNo                        String?
  featured                       Boolean?
  productContent                 String?
  taxMethod                      String?
  productTax                     Float?
  stockQty                       Float?
  barCode                        String?                     @unique
  status                         ProductStatus               @default(ACTIVE)
  inventoryPostingGroupId        String?                     @db.ObjectId
  inventoryPostingGroupCode      String?
  inventoryPostingGroupName      String?
  generalProductPostingGroupId   String?                     @db.ObjectId
  generalProductPostingGroupCode String?
  generalProductPostingGroupName String?
  vatProductPostingGroupId       String?                     @db.ObjectId
  vatProductPostingGroupCode     String?
  vatProductPostingGroupName     String?
  unitId                         String?                     @db.ObjectId
  shopId                         String?                     @default("66c5ea9361d22bb4f6af4e2b") @db.ObjectId
  brandId                        String?                     @db.ObjectId
  categoryId                     String?                     @db.ObjectId
  supplierId                     String?                     @db.ObjectId
  media                          Media[]
  seoMeta                        SeoMeta[]
  productVariants                ProductVariant[]
  warehouseStocks                WarehouseStock[]
  stockHistories                 StockHistory[]
  productRelations               ProductRelation[]
  discounts                      Discount[]
  tags                           ProductTag[]
  versions                       ProductVersion[]
  salesLines                     SalesLine[]
  AdjustmentLine                 AdjustmentLine[]
  PurchaseRecieptLine            PurchaseRecieptLine[]
  PurchaseLine                   PurchaseLine[]
  InventoryPostingGroup          InventoryPostingGroup?      @relation(fields: [inventoryPostingGroupId], references: [id])
  GeneralProductPostingGroup     GeneralProductPostingGroup? @relation(fields: [generalProductPostingGroupId], references: [id])
  VatProductPostingGroup         VatProductPostingGroup?     @relation(fields: [vatProductPostingGroupId], references: [id])
  Unit                           Unit?                       @relation(fields: [unitId], references: [id])
  Shop                           Shop?                       @relation(fields: [shopId], references: [id])
  Brand                          Brand?                      @relation(fields: [brandId], references: [id])
  Category                       Category?                   @relation(fields: [categoryId], references: [id])
  Supplier                       Supplier?                   @relation(fields: [supplierId], references: [id])
  createdAt                      DateTime                    @default(now())
  updatedAt                      DateTime                    @updatedAt
}

model Media {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  productId String    @db.ObjectId
  url       String
  type      MediaType
  altText   String?
  position  Int?
  product   Product   @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}

model SeoMeta {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  productId       String   @db.ObjectId
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  product         Product  @relation(fields: [productId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ProductVariant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  sku         String   @unique
  variantName String
  stockQty    Float?
  unitPrice   Float
  unitCost    Float?
  barCode     String?  @unique
  product     Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WarehouseStock {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  warehouseId String   @db.ObjectId
  productId   String   @db.ObjectId
  stockQty    Float?
  alertQty    Int?
  product     Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StockHistory {
  id               String                    @id @default(auto()) @map("_id") @db.ObjectId
  entryType        StockEntryType?
  postingDate      DateTime
  documentType     StockHistoryDocumentType?
  documentNo       String?
  productId        String                    @db.ObjectId
  productName      String
  productCode      String
  productSku       String
  description      String?
  locationCode     String?
  quantity         Float
  invoicedQty      Float?                    @default(0)
  remainingQty     Float?                    @default(0)
  unitId           String?                   @db.ObjectId
  unitName         String?
  unitAbbreviation String?
  unitCost         Float?                    @default(0)
  totalCost        Float?                    @default(0)
  unitAmount       Float?                    @default(0)
  totalAmount      Float?                    @default(0)
  salesAmount      Float?                    @default(0)
  costAmount       Float?                    @default(0)
  open             Boolean                   @default(true)
  entryNo          Int                       @default(0)
  referenceNo      String?
  product          Product                   @relation(fields: [productId], references: [id])
  unit             Unit?                     @relation(fields: [unitId], references: [id])
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
}

enum StockEntryType {
  PURCHASE
  SALE
  POSITIVE_ADJUST
  NEGATIVE_ADJUST
  TRANSFER
  CONSUMPTION
  OUTPUT
  ASSEMBLY_CONSUMPTION
  ASSEMBLY_OUTPUT
  NONE
}

enum StockHistoryDocumentType {
  SALES_SHIPMENT
  SALES_INVOICE
  SALES_RETURN_RECEIPT
  SALES_CREDIT_MEMO
  PURCHASE_RECEIPT
  PURCHASE_INVOICE
  PURCHASE_RETURN_SHIPMENT
  PURCHASE_CREDIT_MEMO
  TRANSFER_SHIPMENT
  TRANSFER_RECEIPT
  SERVICE_SHIPMENT
  SERVICE_INVOICE
  SERVICE_CREDIT_MEMO
  POSTED_ASSEMBLY
  INVENTORY_RECEIPT
  INVENTORY_SHIPMENT
  DIRECT_TRANSFER
  ADJUSTMENT
}

model ProductRelation {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  productId        String   @db.ObjectId
  relatedProductId String   @db.ObjectId
  relationType     String // Upsell, Cross-sell, etc.
  product          Product  @relation(fields: [productId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Discount {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  productId          String   @db.ObjectId
  discountPercentage Float
  startDate          DateTime
  endDate            DateTime
  active             Boolean  @default(true)
  product            Product  @relation(fields: [productId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model ProductTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  tagName   String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVersion {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  version   Int
  changes   Json
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

model SalesHeader {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  customerId      String         @db.ObjectId
  customerName    String?
  customerPhone   String?
  customerEmail   String?
  orderNumber     String?
  orderDate       DateTime       @default(now())
  orderDueDate    DateTime?      @default(now())
  postingDate     DateTime?      @default(now())
  orderStatus     OrderStatus
  orderType       OrderType
  orderNote       String?
  orderAmount     Float
  orderDiscount   Float?
  orderTax        Float?
  orderTotal      Float
  orderPaidAmount Float?
  orderDueAmount  Float?
  paymentMethod   PaymentMethod?
  salesLines      SalesLine[]
  orderPayments   OrderPayment[]
  salesPersonId   String?        @db.ObjectId
  salesPerson     SalesPerson?   @relation(fields: [salesPersonId], references: [id])
  Shop            Shop?          @relation(fields: [shopId], references: [id])
  shopId          String?        @db.ObjectId
  attendantId     String?        @db.ObjectId
  attendant       User?          @relation(fields: [attendantId], references: [id])
  customer        Customer?      @relation(fields: [customerId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model SalesLine {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  salesHeaderId String      @db.ObjectId
  productId     String      @db.ObjectId
  productName   String
  productCode   String
  productSku    String
  productImage  String
  quantity      Int
  price         Float
  lineDiscount  Float?
  lineTax       Float?
  total         Float
  salesHeader   SalesHeader @relation(fields: [salesHeaderId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
  CHEQUE
  BANK_TRANSFER
  CREDIT
}

model OrderPayment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  salesHeaderId String        @db.ObjectId
  amount        Float
  paymentMethod PaymentMethod
  paymentDate   DateTime?
  salesHeader   SalesHeader   @relation(fields: [salesHeaderId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OrderType {
  ONLINE
  OFFLINE
  BOTH
}

model Expense {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  amount            Float
  date              DateTime         @default(now())
  description       String?
  attachments       String[]
  shopId            String           @db.ObjectId
  expenseCategoryId String?          @db.ObjectId
  payeeId           String?          @db.ObjectId
  shop              Shop             @relation(fields: [shopId], references: [id])
  ExpenseCategory   ExpenseCategory? @relation(fields: [expenseCategoryId], references: [id])
  Payee             Payee?           @relation(fields: [payeeId], references: [id])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ExpenseCategory {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Payee {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String    @unique
  email     String?
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum NotificationType {
  INFO
  WARNING
  ERROR
}

enum NotificationStatus {
  UNREAD
  READ
}

model Notification {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Adjustment {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  referenceNo     String             @unique
  date            DateTime           @default(now())
  description     String?
  activity        AdjustmentActivity
  adjustmentLines AdjustmentLine[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model AdjustmentLine {
  id           String                  @id @default(auto()) @map("_id") @db.ObjectId
  postingDate  DateTime                @default(now())
  entryType    AdjustmentItemEntryType
  documentNo   String
  adjustmentId String                  @db.ObjectId
  productId    String                  @db.ObjectId
  productName  String
  productCode  String
  productSku   String
  shopId       String                  @db.ObjectId
  quantity     Int
  unitId       String                  @db.ObjectId
  reason       AdjustmentItemReason
  unitAmount   Float?
  totalAmount  Float?
  unitCost     Float?
  totalCost    Float?
  entryNo      Int                     @default(0)
  adjustment   Adjustment              @relation(fields: [adjustmentId], references: [id])
  product      Product                 @relation(fields: [productId], references: [id])
  shop         Shop?                   @relation(fields: [shopId], references: [id])
  unit         Unit                    @relation(fields: [unitId], references: [id])
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
}

enum AdjustmentItemEntryType {
  PURCHASE
  SALE
  POSITIVE_ADJUST
  NEGATIVE_ADJUST
}

enum AdjustmentItemReason {
  EXPIRED_ITEM
  STOLEN_ITEM
  RETURNED_ITEM
  DAMAGED_ITEM
  OTHER
}

enum AdjustmentActivity {
  INVENTORY_COUNT
  INVENTORY_ADJUSTMENT
  INVENTORY_TRANSFER
  INVENTORY_CONSUMPTION
  INVENTORY_OUTPUT
  INVENTORY_ASSEMBLY_CONSUMPTION
  INVENTORY_ASSEMBLY_OUTPUT
}

model PurchaseHeader {
  id                  String                 @id @default(auto()) @map("_id") @db.ObjectId
  supplierId          String                 @db.ObjectId
  supplierName        String?
  supplierPhone       String?
  supplierEmail       String?
  documentNo          String?
  documentType        PurchaseDocumentType
  documentDate        DateTime               @default(now())
  dueDate             DateTime?              @default(now())
  postingDate         DateTime?              @default(now())
  status              PurchaseStatus?        @default(OPEN)
  paymentStatus       PurchasePaymentStatus? @default(PENDING)
  note                String?
  amount              Float                  @default(0)
  discountPercent     Float?                 @default(0)
  discountAmount      Float?                 @default(0)
  totalDiscount       Float?                 @default(0)
  taxPercent          Float?                 @default(0)
  taxAmount           Float?                 @default(0)
  totalAmount         Float                  @default(0)
  paidAmount          Float?                 @default(0)
  dueAmount           Float?                 @default(0)
  totalAmountInclTax  Float?                 @default(0)
  totalAmountExclTax  Float?                 @default(0)
  paymentMethod       PaymentMethod?
  purchaseLines       PurchaseLine[]
  locationCode        String?                @db.ObjectId
  Shop                Shop?                  @relation(fields: [locationCode], references: [id])
  supplier            Supplier?              @relation(fields: [supplierId], references: [id])
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  SupplierLedgerEntry SupplierLedgerEntry[]
}

model PurchaseLine {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  purchaseHeaderId    String               @db.ObjectId
  documentType        PurchaseDocumentType
  documentNo          String?
  type                PurchaseLineType
  no_                 String               @db.ObjectId
  description         String
  code                String
  quantity            Int
  unitCost            Float
  unitId              String?              @db.ObjectId
  unitName            String?
  unitAbbreviation    String?
  lineAmount          Float
  lineDiscountPercent Float?
  lineDiscountAmount  Float?
  lineTaxPercent      Float?
  lineTaxAmount       Float?
  Amount              Float
  quantityToReceive   Int?                 @default(0)
  quantityToInvoice   Int?                 @default(0)
  quantityReceived    Int?                 @default(0)
  quantityInvoiced    Int?                 @default(0)
  AmountInclTax       Float?               @default(0)
  AmountExclTax       Float?               @default(0)
  lineNo              Int                  @unique @default(0)
  locationId          String?              @db.ObjectId
  locationName        String?
  locationSlug        String?
  supplierId          String?              @db.ObjectId
  supplierName        String?
  supplierPhone       String?
  supplierEmail       String?
  postingDate         DateTime?
  dueDate             DateTime?
  documentDate        DateTime?
  productId           String?              @db.ObjectId
  productName         String?
  productCode         String?
  productSlug         String?
  Product             Product?             @relation(fields: [productId], references: [id])
  Shop                Shop?                @relation(fields: [locationId], references: [id])
  supplier            Supplier?            @relation(fields: [supplierId], references: [id])
  unit                Unit?                @relation(fields: [unitId], references: [id])
  purchaseHeader      PurchaseHeader       @relation(fields: [purchaseHeaderId], references: [id])
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

enum PurchaseProcessStatus {
  PENDING
  PROCESSING
  RECEIVED
  CANCELLED
  PENDING_PAYMENT
}

enum PurchaseStatus {
  OPEN
  RELEASED
  PENDING_APPROVAL
  PENDING_PREPAYMENT
}

enum PurchasePaymentStatus {
  PENDING
  PAID
  PARTIAL
  CANCELLED
}

enum PurchaseDocumentType {
  QUOTE
  ORDER
  INVOICE
  CREDIT_MEMO
  BLANKET_ORDER
  RETURN_ORDER
}

enum PurchaseLineType {
  GL_ACCOUNT
  ITEM
  RESOURCE
  FIXED_ASSET
  ITEM_CHARGE
}

model SupplierLedgerEntry {
  id                        String                   @id @default(auto()) @map("_id") @db.ObjectId
  entryNo                   Int                      @unique @default(0)
  supplierId                String                   @db.ObjectId
  postingDate               DateTime
  documentType              LedgerEntryDocumentType
  documentNo                String                   @unique
  description               String
  supplierName              String
  supplierPhone             String
  supplierEmail             String
  currencyRate              Float?
  currencyCode              String?
  documentDate              DateTime
  amount                    Float
  amountLocal               Float?
  remainingAmount           Float?
  remainingAmountLocal      Float?
  externalDocumentNo        String?
  originalAmount            Float
  originalAmountLocal       Float?
  paidAmount                Float?
  paidAmountLocal           Float?
  invoiceDiscount           Float?
  invoiceDiscountLocal      Float?
  lineDiscount              Float?
  lineDiscountLocal         Float?
  totalInvoiceDiscount      Float?
  totalInvoiceDiscountLocal Float?
  vendorPostingGroupId      String?                  @db.ObjectId
  vendorPostingGroupCode    String?
  vendorPostingGroupName    String?
  dimension1                String?
  dimension2                String?
  purchaseCode              String?
  dimension3                String?
  dimension4                String?
  dimension5                String?
  dimension6                String?
  dimension7                String?
  dimension8                String?
  dimension9                String?
  dimension10               String?
  paymentMethod             PaymentMethod?
  dueDate                   DateTime?
  open                      Boolean                  @default(true)
  purchaseHeaderId          String?                  @db.ObjectId
  sourceCode                String?
  debitAmount               Float?
  debitAmountLocal          Float?
  creditAmount              Float?
  creditAmountLocal         Float?
  reversed                  Boolean                  @default(false)
  reversedEntryNo           Int?
  reversedByEntryNo         Int?
  adjustedCurrencyFactor    Float?
  originalCurrencyFactor    Float?
  closedByCurrencyCode      String?
  closedByAmount            Float?
  closedByAmountLocal       Float?
  closedByEntryNo           Int?
  closedByDate              DateTime?
  appliesToDocType          LedgerEntryDocumentType?
  appliesToDocNo            String?
  appliesToID               String?
  appliesToEntryNo          Int?
  appliesToDate             DateTime?
  transactionNo             String?
  journalBatchId            String?                  @db.ObjectId
  journalBatchName          String?
  journalBatchCode          String?
  Reason                    String?
  balAccountType            AccountType?
  balAccountNo              String?
  balAccountName            String?
  positive                  Boolean
  purchaseHeader            PurchaseHeader?          @relation(fields: [purchaseHeaderId], references: [id])
  supplier                  Supplier                 @relation(fields: [supplierId], references: [id])
  vendorPostingGroup        VendorPostingGroup?      @relation(fields: [journalBatchId], references: [id])
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
}

model VendorPostingGroup {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  code                  String                  @unique
  name                  String
  payableAccount        String?
  supplierLedgerEntries SupplierLedgerEntry[]
  PurchaseReceiptHeader PurchaseReceiptHeader[]
  Supplier              Supplier[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model CustomerPostingGroup {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  code              String     @unique
  name              String
  receivableAccount String?
  Customer          Customer[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model JournalBatch {
  id                        String               @id @default(auto()) @map("_id") @db.ObjectId
  name                      String
  description               String?
  journalTemplateId         String               @db.ObjectId
  journalTemplateCode       String?
  journalTemplateName       String?
  journalTemplateSourceCode String?
  journalTemplateReasonCode String?
  journalTemplateType       journalTemplateType?
  noSeriesId                String?              @db.ObjectId
  noSeriesCode              String?
  journalTemplate           JournalTemplate      @relation(fields: [journalTemplateId], references: [id])
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt
  NoSeries                  NoSeries?            @relation(fields: [noSeriesId], references: [id])

  @@unique([name, journalTemplateId])
}

model JournalTemplate {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  name         String              @unique
  description  String?
  type         journalTemplateType
  recurring    Boolean             @default(false)
  sourceCode   String?
  reasonCode   String?
  JournalBatch JournalBatch[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

enum LedgerEntryDocumentType {
  BLANK
  PAYMENT
  INVOICE
  CREDIT_MEMO
  REFUND
  REMINDER
  FINANCE_CHARGE_MEMO
}

enum AccountType {
  GL_ACCOUNT
  CUSTOMER
  VENDOR
  BANK_ACCOUNT
  FIXED_ASSET
  EMPLOYEE
  ALLOCATION_ACCOUNT
  IC_PATNER
}

enum journalTemplateType {
  ASSETS
  BANK_DEPOSIT
  CASH_RECEIPT
  GENERAL
  INTER_COMPANY
  JOBS
  PAYMENTS
  PURCHASES
  SALES
}

model PurchaseReceiptHeader {
  id                     String                @id @default(auto()) @map("_id") @db.ObjectId
  supplierId             String                @db.ObjectId
  supplierName           String?
  supplierPhone          String?
  supplierEmail          String?
  documentNo             String?
  documentDate           DateTime              @default(now())
  orderDate              DateTime              @default(now())
  postingDate            DateTime?             @default(now())
  dueDate                DateTime?             @default(now())
  promisedReceiptDate    DateTime?             @default(now())
  requestedReceiptDate   DateTime?             @default(now())
  orderNo                String?
  postingDescription     String?
  locationCode           String?               @db.ObjectId
  dimension1             String?
  dimension2             String?
  dimension3             String?
  dimension4             String?
  dimension5             String?
  dimension6             String?
  dimension7             String?
  dimension8             String?
  dimension9             String?
  dimension10            String?
  vendorPostingGroupId   String?               @db.ObjectId
  vendorPostingGroupCode String?
  vendorPostingGroupName String?
  currencyCode           String?
  currencyRate           Float?
  currencyFactor         Float?
  sourceCode             String?
  invoiceDiscountCode    String?
  noPrinted              Int?
  noCopied               Int?
  noEmailed              Int?
  purchaseRecieptLines   PurchaseRecieptLine[]
  Shop                   Shop?                 @relation(fields: [locationCode], references: [id])
  supplier               Supplier?             @relation(fields: [supplierId], references: [id])
  vendorPostingGroup     VendorPostingGroup?   @relation(fields: [vendorPostingGroupId], references: [id])
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
}

model PurchaseRecieptLine {
  id                         String                 @id @default(auto()) @map("_id") @db.ObjectId
  purchaseReceiptHeaderId    String?                @db.ObjectId
  documentNo                 String?
  lineNo                     Int                    @unique @default(0)
  type                       PurchaseLineType
  no_                        String                 @unique @db.ObjectId
  description                String
  code                       String
  quantity                   Int
  directUnitCost             Float?
  totalUnitCost              Float?
  totalUnitCostlocal         Float?
  lineDiscountPercent        Float?
  lineDiscountAmount         Float?
  lineTaxPercent             Float?
  lineTaxAmount              Float?
  unitPriceLocal             Float?
  quantityInvoiced           Int?                   @default(0)
  orderNo                    String?
  orderLineNo                Int?
  postingDate                DateTime?
  dimension1                 String?
  dimension2                 String?
  dimension3                 String?
  dimension4                 String?
  dimension5                 String?
  dimension6                 String?
  dimension7                 String?
  dimension8                 String?
  dimension9                 String?
  dimension10                String?
  genBusPostingGroupId       String?                @db.ObjectId
  genBusPostingGroupCode     String?
  genBusPostingGroupName     String?
  genProductPostingGroupId   String?                @db.ObjectId
  genProductPostingGroupCode String?
  genProductPostingGroupName String?
  vatBusPostingGroupId       String?                @db.ObjectId
  vatBusPostingGroupCode     String?
  vatBusPostingGroupName     String?
  vatProductPostingGroupId   String?                @db.ObjectId
  vatProductPostingGroupCode String?
  vatProductPostingGroupName String?
  vatBaseAmount              Float?
  itemCategoryCode           String?
  nonStock                   Boolean?
  itemChargeBase             Float?
  correction                 Boolean?
  qtyPerUnitOfMeasure        Float?
  currencyCode               String?
  currencyRate               Float?
  currencyFactor             Float?
  sourceCode                 String?
  unitId                     String?                @db.ObjectId
  unitName                   String?
  unitAbbreviation           String?
  postingGroupId             String?                @db.ObjectId
  postingGroupCode           String?
  postingGroupName           String?
  expectedReceiptDate        DateTime?              @default(now())
  description2               String?
  description3               String?
  locationId                 String?                @db.ObjectId
  locationName               String?
  locationSlug               String?
  supplierId                 String?                @db.ObjectId
  supplierName               String?
  supplierPhone              String?
  supplierEmail              String?
  productId                  String?                @db.ObjectId
  productName                String?
  productCode                String?
  productSlug                String?
  Product                    Product?               @relation(fields: [productId], references: [id])
  Shop                       Shop?                  @relation(fields: [locationId], references: [id])
  supplier                   Supplier?              @relation(fields: [supplierId], references: [id])
  unit                       Unit?                  @relation(fields: [unitId], references: [id])
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  PurchaseReceiptHeader      PurchaseReceiptHeader? @relation(fields: [purchaseReceiptHeaderId], references: [id])
}

model VatBusPostingGroup {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  code            String            @unique
  name            String
  Supplier        Supplier[]
  Customer        Customer[]
  VatPostingSetup VatPostingSetup[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model VatProductPostingGroup {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  code            String            @unique
  name            String
  Product         Product[]
  VatPostingSetup VatPostingSetup[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model VatPostingSetup {
  id                         String                  @id @default(auto()) @map("_id") @db.ObjectId
  description                String?
  vatBusPostingGroupId       String?                 @db.ObjectId
  vatBusPostingGroupCode     String?
  vatBusPostingGroupName     String?
  vatProductPostingGroupId   String?                 @db.ObjectId
  vatProductPostingGroupCode String?
  vatProductPostingGroupName String?
  taxPercent                 Float?
  vatIdentifier              String?
  salesVatAccount            String?
  purchaseVatAccount         String?
  blocked                    Boolean?                @default(false)
  vatProductPostingGroup     VatProductPostingGroup? @relation(fields: [vatProductPostingGroupId], references: [id])
  vatBusPostingGroup         VatBusPostingGroup?     @relation(fields: [vatBusPostingGroupId], references: [id])
  createdAt                  DateTime                @default(now())
  updatedAt                  DateTime                @updatedAt

  @@unique([vatBusPostingGroupId, vatProductPostingGroupId])
}

model GeneralProductPostingGroup {
  id                          String            @id @default(auto()) @map("_id") @db.ObjectId
  code                        String            @unique
  name                        String
  defVatProductPostingGroupId String?           @db.ObjectId
  vatProductPostingGroupCode  String?
  vatProductPostingGroupName  String?
  autoInsertDefault           Boolean?
  genPostingSetup             GenPostingSetup[]
  Product                     Product[]
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
}

model GenBusPostingGroup {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  code                    String            @unique
  name                    String
  defVatBusPostingGroupId String?           @db.ObjectId
  vatBusPostingGroupCode  String?
  vatBusPostingGroupName  String?
  autoInsertDefault       Boolean?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  genPostingSetup         GenPostingSetup[]
  Supplier                Supplier[]
  Customer                Customer[]
}

model GenPostingSetup {
  id                         String                      @id @default(auto()) @map("_id") @db.ObjectId
  description                String?
  genBusPostingGroupId       String?                     @db.ObjectId
  genBusPostingGroupCode     String?
  genBusPostingGroupName     String?
  genProductPostingGroupId   String?                     @db.ObjectId
  genProductPostingGroupCode String?
  genProductPostingGroupName String?
  blocked                    Boolean?
  salesAccount               String?
  purchaseAccount            String?
  salesCreditMemoAccount     String?
  purchaseCreditMemoAccount  String?
  salesDiscountAccount       String?
  purchaseDiscountAccount    String?
  costOfGoodsSoldAccount     String?
  inventoryAdjustmentAccount String?
  genProductPostingGroup     GeneralProductPostingGroup? @relation(fields: [genProductPostingGroupId], references: [id])
  genBusPostingGroup         GenBusPostingGroup?         @relation(fields: [genBusPostingGroupId], references: [id])
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
}

model InventoryPostingGroup {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  code                  String                  @unique
  name                  String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  InventoryPostingSetup InventoryPostingSetup[]
  Product               Product[]
}

model InventoryPostingSetup {
  id                        String                 @id @default(auto()) @map("_id") @db.ObjectId
  description               String?
  inventoryPostingGroupId   String?                @db.ObjectId
  inventoryPostingGroupCode String?
  inventoryPostingGroupName String?
  blocked                   Boolean?
  shopId                    String?                @db.ObjectId
  shopName                  String?
  shopCode                  String?
  shopSlug                  String?
  inventoryAccount          String?
  shop                      Shop?                  @relation(fields: [shopId], references: [id])
  inventoryPostingGroup     InventoryPostingGroup? @relation(fields: [inventoryPostingGroupId], references: [id])
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
}

model NoSeries {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  code          String         @unique
  description   String
  defaultSeries Boolean        @default(true)
  manualSeries  Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  NoSeriesLine  NoSeriesLine[]
  JournalBatch  JournalBatch[]
}

model NoSeriesLine {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  noSeriesId    String    @db.ObjectId
  noSeriesCode  String
  startingDate  DateTime?
  endingDate    DateTime?
  startingNo    String
  endingNo      String?
  lastDateUsed  DateTime?
  lastNoUsed    String?
  lastDigitUsed Int?
  increment     Int?      @default(1)
  NoSeries      NoSeries  @relation(fields: [noSeriesId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model NoSeriesSetup {
  id                          String   @id @default(auto()) @map("_id") @db.ObjectId
  journalTemplateNoSeriesId   String?  @db.ObjectId
  journalTemplateNoSeriesCode String?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}
