generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id                      String                @id @default(auto()) @map("_id") @db.ObjectId
  No                      String
  name                    String
  balanceAmount           Float?                @default(0)
  balanceAmountLCY        Float?                @default(0)
  creditLimitLCY          Float?                @default(0)
  blocked                 blockedStatus         @default(BLANK)
  salesAmount             Float?                @default(0)
  paidAmount              Float?                @default(0)
  image                   String?
  address                 String?
  address_2               String?
  country                 String?
  city                    String?
  postalCode              String?
  phone                   String?
  mobile                  String?
  email                   String?
  website                 String?
  customerType            CustomerType
  taxPin                  String?
  regNumber               String?
  paymentTerms            String?
  NIN                     String?
  genBusPostingGroupId    String?               @db.ObjectId
  vatBusPostingGroupId    String?               @db.ObjectId
  customerPostingGroupId  String?               @db.ObjectId
  currencyCodeId          String?               @db.ObjectId
  customerPriceGroupId    String?               @db.ObjectId
  customerDiscountGroupId String?               @db.ObjectId //TODO: create customer discount group model
  allowLineDiscount       Boolean?              @default(false)
  pricesIncludingTax      Boolean?              @default(false)
  customerEFRISType       customerEFRISType?    @default(B2C)
  URARegistrationName     String?
  TINVerified             Boolean?              @default(false)
  salesPersonId           String?               @db.ObjectId
  companyId               String                @db.ObjectId
  tenantId                String                @db.ObjectId
  userId                  String                @db.ObjectId
  salesHeaders            SalesHeader[]
  OnlineOrderSetup        OnlineOrderSetup[]
  CustomerContact         CustomerContact[]
  user                    User                  @relation(fields: [userId], references: [id])
  company                 Company               @relation(fields: [companyId], references: [id])
  tenant                  Tenant                @relation(fields: [tenantId], references: [id])
  salesPerson             SalesPerson?          @relation(fields: [salesPersonId], references: [id])
  customerPostingGroup    CustomerPostingGroup? @relation(fields: [customerPostingGroupId], references: [id])
  genBusPostingGroup      GenBusPostingGroup?   @relation(fields: [genBusPostingGroupId], references: [id])
  vatBusPostingGroup      VatBusPostingGroup?   @relation(fields: [vatBusPostingGroupId], references: [id])
  currencyCode            Currency?             @relation(fields: [currencyCodeId], references: [id])
  customerPriceGroup      CustomerPriceGroup?   @relation(fields: [customerPriceGroupId], references: [id])
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  @@unique([tenantId, companyId, No])
}

enum blockedStatus {
  BLANK
  SHIP
  INVOICE
  ALL
}

enum customerEFRISType {
  B2C
  B2B
  B2G
  FOREIGN
}

model CustomerPriceGroup {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  code                 String
  description          String?
  allowLineDiscount    Boolean? @default(false)
  allowInvoiceDiscount Boolean? @default(false)
  priceIncludesTax     Boolean? @default(false)
  companyId            String   @db.ObjectId
  tenantId             String   @db.ObjectId
  userId               String   @db.ObjectId
  user                 User     @relation(fields: [userId], references: [id])
  company              Company  @relation(fields: [companyId], references: [id])
  tenant               Tenant   @relation(fields: [tenantId], references: [id])
  Customer Customer[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  @@unique([tenantId, companyId, code])
}

model Currency {
  id                           String                 @id @default(auto()) @map("_id") @db.ObjectId
  code                         String
  name                         String
  symbol                       String?
  exchangeRateDate             DateTime?
  exchangeRate                 Float?
  realizedGainsAccountId       String?                @db.ObjectId
  realizedLossesAccountId      String?                @db.ObjectId
  unrealizedGainsAccountId     String?                @db.ObjectId
  unrealizedLossesAccountId    String?                @db.ObjectId
  amountRoundingPrecision      Float?                 @default(0.01)
  amountDecimalPlaces          Int?                   @default(2)
  invoiceRoundingPrecision     Float?                 @default(0.01)
  invoiceRoundingType          invoiceRoundingType    @default(NEAREST)
  unitAmountRoundingPrecision  Float?                 @default(0.01)
  unitAmountDecimalPlaces      Int?                   @default(2)
  applicationRoundingPrecision Float?                 @default(0.01)
  convRoundingDebitAccountId   String?                @db.ObjectId
  convRoundingCreditAccountId  String?                @db.ObjectId
  paymentTolerancePer          Float?                 @default(0.0)
  maxPaymentToleranceAmount    Float?                 @default(0.0)
  currencyFactor               Float?                 @default(1.0)
  userId                       String                 @db.ObjectId
  companyId                    String?                @db.ObjectId
  tenantId                     String?                @db.ObjectId
  CurrencyExchangeRate         CurrencyExchangeRate[]
  relationalCurrencyRates      CurrencyExchangeRate[] @relation("relationalCurrency")
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  Customer                     Customer[]

  @@unique([tenantId, companyId, code])
}

model CurrencyExchangeRate {
  id                                   String          @id @default(auto()) @map("_id") @db.ObjectId
  startingDate                         DateTime        @default(now())
  currencyCode                         String          @db.ObjectId
  relationalCurrencyCode               String?         @db.ObjectId
  exchangeRateAmount                   Float?          @default(1.0)
  relationalExchangeRateAmount         Float?          @default(1.0)
  adjustedExchangeRateAmount           Float?          @default(1.0)
  relationalAdjustedExchangeRateAmount Float?          @default(1.0)
  fixExRateAmount                      fixExRateAmount @default(CURRENCY)
  userId                               String          @db.ObjectId
  companyId                            String?         @db.ObjectId
  tenantId                             String?         @db.ObjectId
  user                                 User            @relation(fields: [userId], references: [id])
  company                              Company?        @relation(fields: [companyId], references: [id])
  tenant                               Tenant?         @relation(fields: [tenantId], references: [id])
  currency                             Currency        @relation(fields: [currencyCode], references: [id])
  relationalCurrency                   Currency?       @relation(name: "relationalCurrency", fields: [relationalCurrencyCode], references: [id])
  createdAt                            DateTime        @default(now())
  updatedAt                            DateTime        @updatedAt

  @@unique([tenantId, companyId, currencyCode, startingDate])
}

enum invoiceRoundingType {
  NEAREST
  UP
  DOWN
}

enum fixExRateAmount {
  CURRENCY
  RELATIONAL_CURRENCY
  BOTH
}

model SalesPerson {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  name        String
  phone       String
  email       String?
  image       String?
  Customer    Customer[]
  SalesHeader SalesHeader[]
  companyId   String?       @db.ObjectId
  tenantId    String?       @db.ObjectId
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  company     Company?      @relation(fields: [companyId], references: [id])
  tenant      Tenant?       @relation(fields: [tenantId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([tenantId, companyId, code])
}

model Contact {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  code            String
  name            String
  phone           String?
  email           String?
  image           String?
  companyId       String            @db.ObjectId
  tenantId        String            @db.ObjectId
  userId          String            @db.ObjectId
  user            User              @relation(fields: [userId], references: [id])
  company         Company           @relation(fields: [companyId], references: [id])
  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  CustomerContact CustomerContact[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  SupplierContact SupplierContact[]

  @@unique([tenantId, companyId, code])
}

model CustomerContact {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId String   @db.ObjectId
  contactId  String   @db.ObjectId
  companyId  String   @db.ObjectId
  tenantId   String   @db.ObjectId
  userId     String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [id])
  contact    Contact  @relation(fields: [contactId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  company    Company  @relation(fields: [companyId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([tenantId, companyId, customerId, contactId])
}

enum CustomerType {
  RETAIL
  WHOLESALE
  DISTRIBUTOR
  FOREIGN
  ONLINE
  OTHER
}

model User {
  id                         String                       @id @default(auto()) @map("_id") @db.ObjectId
  fullName                   String?
  email                      String
  username                   String
  password                   String
  phone                      String
  gender                     Gender
  image                      String?
  role                       Role                         @default(ATTENDANT)
  isVerified                 Boolean                      @default(false)
  resetToken                 String?
  resetTokenExpiry           DateTime?
  salesHeaders               SalesHeader[]
  tenantId                   String?                      @db.ObjectId
  tenant                     Tenant?                      @relation(fields: [tenantId], references: [id])
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  Customer                   Customer[]
  SalesPerson                SalesPerson[]
  Supplier                   Supplier[]
  Unit                       Unit[]
  Brand                      Brand[]
  Category                   Category[]
  Product                    Product[]
  ProductVariant             ProductVariant[]
  StockHistory               StockHistory[]
  ProductTag                 ProductTag[]
  Tag                        Tag[]
  SalesLine                  SalesLine[]
  OrderPayment               OrderPayment[]
  Payee                      Payee[]
  Notification               Notification[]
  Adjustment                 Adjustment[]
  AdjustmentLine             AdjustmentLine[]
  PurchaseHeader             PurchaseHeader[]
  PurchaseLine               PurchaseLine[]
  SupplierLedgerEntry        SupplierLedgerEntry[]
  VendorPostingGroup         VendorPostingGroup[]
  CustomerPostingGroup       CustomerPostingGroup[]
  JournalBatch               JournalBatch[]
  JournalTemplate            JournalTemplate[]
  generalJournalLine         generalJournalLine[]
  PurchaseReceiptHeader      PurchaseReceiptHeader[]
  PurchaseReceiptLine        PurchaseReceiptLine[]
  VatBusPostingGroup         VatBusPostingGroup[]
  VatProductPostingGroup     VatProductPostingGroup[]
  VatPostingSetup            VatPostingSetup[]
  GeneralProductPostingGroup GeneralProductPostingGroup[]
  GenBusPostingGroup         GenBusPostingGroup[]
  GenPostingSetup            GenPostingSetup[]
  InventoryPostingGroup      InventoryPostingGroup[]
  InventoryPostingSetup      InventoryPostingSetup[]
  NoSeries                   NoSeries[]
  NoSeriesLine               NoSeriesLine[]
  NoSeriesSetup              NoSeriesSetup[]
  companyInformation         companyInformation[]
  OnlineOrderSetup           OnlineOrderSetup[]
  ItemJournalTemplate        ItemJournalTemplate[]
  ItemJournalBatch           ItemJournalBatch[]
  ItemJournalLine            ItemJournalLine[]
  GeneralLedgerEntry         GeneralLedgerEntry[]
  BankAccount                BankAccount[]
  BankAccountPostingGroup    BankAccountPostingGroup[]
  BankAccountLedgerEntry     BankAccountLedgerEntry[]
  GLAccount                  GLAccount[]
  UserCompany                UserCompany[]
  Contact                    Contact[]
  CustomerContact            CustomerContact[]
  SupplierContact            SupplierContact[]
  CurrencyExchangeRate       CurrencyExchangeRate[]
  CustomerPriceGroup         CustomerPriceGroup[]

  @@unique([tenantId, email])
  @@unique([tenantId, username])
  @@unique([tenantId, phone])
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  ATTENDANT
  ONLINE_SALES
}

model Location {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  code                   String
  name                   String
  address                String?
  address2               String?
  city                   String?
  postalCode             String?
  country                String?
  phone                  String?
  email                  String?
  faxNo                  String?
  contact                String?
  homepage               String?
  useAsInTransit         Boolean                 @default(false)
  salesHeaders           SalesHeader[]
  adjustmentLines        AdjustmentLine[]
  purchaseHeaders        PurchaseHeader[]
  purchaseLines          PurchaseLine[]
  purchaseReceiptHeaders PurchaseReceiptHeader[]
  purchaseReceiptLines   PurchaseReceiptLine[]
  inventoryPostingSetups InventoryPostingSetup[]
  StockHistory           StockHistory[]
  companyId              String?                 @db.ObjectId
  tenantId               String?                 @db.ObjectId
  company                Company?                @relation(fields: [companyId], references: [id])
  tenant                 Tenant?                 @relation(fields: [tenantId], references: [id])
  ItemJournalLine        ItemJournalLine[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt

  @@unique([tenantId, companyId, code])
}

model Supplier {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  supplierNo             String
  supplierType           SupplierType
  name                   String
  phone                  String
  email                  String?
  country                String
  location               String
  website                String?
  taxPin                 String?
  regNumber              String?
  bankAccountNumber      String?
  bankName               String?
  paymentTerms           String?
  totalAmount            Float?                  @default(0)
  paidAmount             Float?                  @default(0)
  balanceAmount          Float?                  @default(0)
  logo                   String?                 @default("https://utfs.io/f/7d3eb071-433f-47e9-b962-7de707bdbeb2-uwz78d.png")
  address                String?
  address_2              String?
  rating                 Float?
  note                   String?
  products               Product[]
  PurchaseHeaders        PurchaseHeader[]
  SupplierLedgerEntries  SupplierLedgerEntry[]
  PurchaseReceiptHeaders PurchaseReceiptHeader[]
  PurchaseLines          PurchaseLine[]
  PurchaseReceiptLines   PurchaseReceiptLine[]
  vendorPostingGroupId   String?                 @db.ObjectId
  genBusPostingGroupId   String?                 @db.ObjectId
  vatBusPostingGroupId   String?                 @db.ObjectId
  companyId              String?                 @db.ObjectId
  tenantId               String?                 @db.ObjectId
  userId                 String                  @db.ObjectId
  user                   User                    @relation(fields: [userId], references: [id])
  company                Company?                @relation(fields: [companyId], references: [id])
  tenant                 Tenant?                 @relation(fields: [tenantId], references: [id])
  vendorPostingGroup     VendorPostingGroup?     @relation(fields: [vendorPostingGroupId], references: [id])
  genBusPostingGroup     GenBusPostingGroup?     @relation(fields: [genBusPostingGroupId], references: [id])
  vatBusPostingGroup     VatBusPostingGroup?     @relation(fields: [vatBusPostingGroupId], references: [id])
  SupplierContact        SupplierContact[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt

  @@unique([tenantId, companyId, supplierNo])
}

enum SupplierType {
  MANUFACTURER
  DISTRIBUTOR
  WHOLESALER
  RETAILER
  OTHER
}

model SupplierContact {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  supplierId String   @db.ObjectId
  contactId  String   @db.ObjectId
  companyId  String   @db.ObjectId
  tenantId   String   @db.ObjectId
  userId     String   @db.ObjectId
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  contact    Contact  @relation(fields: [contactId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  company    Company  @relation(fields: [companyId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([tenantId, companyId, supplierId, contactId])
}

model Unit {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  code                 String
  name                 String
  abbreviation         String
  AdjustmentLine       AdjustmentLine[]
  StockHistory         StockHistory[]
  PurchaseLine         PurchaseLine[]
  PurchaseReceiptLines PurchaseReceiptLine[]
  companyId            String?               @db.ObjectId
  tenantId             String?               @db.ObjectId
  userId               String                @db.ObjectId
  user                 User                  @relation(fields: [userId], references: [id])
  company              Company?              @relation(fields: [companyId], references: [id])
  tenant               Tenant?               @relation(fields: [tenantId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  ItemJournalLine      ItemJournalLine[]
  ItemUnit             ItemUnit[]
  Product              Product[]

  @@unique([tenantId, companyId, code])
}

model ItemUnit {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  productId           String  @db.ObjectId
  unitId              String  @db.ObjectId
  QtyPerUnitOfMeasure Float?
  length              Float?
  width               Float?
  height              Float?
  weight              Float?
  cubage              Float?
  tenantId            String  @db.ObjectId
  companyId           String  @db.ObjectId
  userId              String  @db.ObjectId
  qtyPerUnitOfMeasure Float?
  product             Product @relation(fields: [productId], references: [id])
  unit                Unit    @relation(fields: [unitId], references: [id])

  @@unique([tenantId, companyId, productId, unitId])
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  code      String
  image     String?
  products  Product[]
  companyId String    @db.ObjectId
  tenantId  String    @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  company   Company   @relation(fields: [companyId], references: [id])
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([tenantId, companyId, code])
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  code      String
  image     String?
  products  Product[]
  companyId String    @db.ObjectId
  tenantId  String    @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  company   Company   @relation(fields: [companyId], references: [id])
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([tenantId, companyId, code])
}

model Product {
  id                            String                      @id @default(auto()) @map("_id") @db.ObjectId
  productNo                     String
  description                   String
  blocked                       Boolean?                    @default(false)
  type                          ProductType                 @default(INVENTORY)
  baseUnitOfMeasure             String?                     @db.ObjectId
  itemCategoryId                String?                     @db.ObjectId
  variantMandatoryIfExists      Boolean?                    @default(false)
  excludeFromServiceDeclaration Boolean?                    @default(false)
  shelfNo                       String?
  inventory                     Float?
  qtyOnPurchaseOrder            Float?
  qtyOnProductionOrder          Float?
  qtyOnComponentLines           Float?
  qtyOnSalesInvoice             Float?
  qtyOnSalesOrder               Float?
  stockOutWarning               Boolean?                    @default(true)
  unitVolume                    Float?
  costingMethod                 CostingMethod?              @default(FIFO)
  standardCost                  Float?
  unitCost                      Float?
  lastDirectCost                Float?
  netInvoicedQty                Float?
  costIsAdjusted                Boolean?                    @default(false)
  costIsPostedToGL              Boolean?                    @default(false)
  PurchasePricesAndDiscount     String?
  generalProductPostingGroupId  String?                     @db.ObjectId
  inventoryPostingGroupId       String?                     @db.ObjectId
  vatProductPostingGroupId      String?                     @db.ObjectId
  unitPrice                     Float?
  profitPercentage              Float?
  salesPricesAndDiscount        String?
  salesBlocked                  Boolean?                    @default(false)
  wholeSalePrice                Float?                      @default(0)
  featured                      Boolean?
  productContent                String?
  brandId                       String?                     @db.ObjectId
  ItemUnit                      ItemUnit[]
  supplierId                    String?                     @db.ObjectId
  images                        String[]
  productVariants               ProductVariant[]
  stockHistories                StockHistory[]
  tags                          ProductTag[]
  salesLines                    SalesLine[]
  AdjustmentLines               AdjustmentLine[]
  PurchaseReceiptLines          PurchaseReceiptLine[]
  PurchaseLines                 PurchaseLine[]
  companyId                     String?                     @db.ObjectId
  tenantId                      String?                     @db.ObjectId
  userId                        String                      @db.ObjectId
  InventoryPostingGroup         InventoryPostingGroup?      @relation(fields: [inventoryPostingGroupId], references: [id])
  GeneralProductPostingGroup    GeneralProductPostingGroup? @relation(fields: [generalProductPostingGroupId], references: [id])
  VatProductPostingGroup        VatProductPostingGroup?     @relation(fields: [vatProductPostingGroupId], references: [id])
  Brand                         Brand?                      @relation(fields: [brandId], references: [id])
  Category                      Category?                   @relation(fields: [itemCategoryId], references: [id])
  Supplier                      Supplier?                   @relation(fields: [supplierId], references: [id])
  unit                          Unit?                       @relation(fields: [baseUnitOfMeasure], references: [id])
  user                          User                        @relation(fields: [userId], references: [id])
  company                       Company?                    @relation(fields: [companyId], references: [id])
  tenant                        Tenant?                     @relation(fields: [tenantId], references: [id])
  createdAt                     DateTime                    @default(now())
  updatedAt                     DateTime                    @updatedAt
  ItemJournalLine               ItemJournalLine[]

  @@unique([tenantId, companyId, productNo])
}

enum ProductType {
  INVENTORY
  SERVICE
  NON_INVENTORY
}

enum CostingMethod {
  FIFO
  LIFO
  SPECIFIC
  AVERAGE
  STANDARD
}

model ProductVariant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  sku         String   @unique
  variantName String
  stockQty    Float?
  unitPrice   Float
  unitCost    Float?
  barCode     String?  @unique
  companyId   String?  @db.ObjectId
  tenantId    String?  @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  company     Company? @relation(fields: [companyId], references: [id])
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tenantId, companyId])
}

model StockHistory {
  id           String                    @id @default(auto()) @map("_id") @db.ObjectId
  entryType    StockEntryType?
  postingDate  DateTime
  documentType StockHistoryDocumentType?
  documentNo   String?
  productId    String                    @db.ObjectId
  description  String?
  locationId   String?                   @db.ObjectId
  quantity     Float
  invoicedQty  Float?                    @default(0)
  remainingQty Float?                    @default(0)
  unitId       String?                   @db.ObjectId
  unitCost     Float?                    @default(0)
  totalCost    Float?                    @default(0)
  unitAmount   Float?                    @default(0)
  totalAmount  Float?                    @default(0)
  salesAmount  Float?                    @default(0)
  costAmount   Float?                    @default(0)
  open         Boolean                   @default(true)
  orderType    OrderTypeItemLedger?      @default(BLANK)
  entryNo      Int                       @default(0)
  referenceNo  String?
  companyId    String?                   @db.ObjectId
  tenantId     String?                   @db.ObjectId
  userId       String                    @db.ObjectId
  user         User                      @relation(fields: [userId], references: [id])
  company      Company?                  @relation(fields: [companyId], references: [id])
  tenant       Tenant?                   @relation(fields: [tenantId], references: [id])
  product      Product                   @relation(fields: [productId], references: [id])
  unit         Unit?                     @relation(fields: [unitId], references: [id])
  location     Location?                 @relation(fields: [locationId], references: [id])
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt

  @@unique([tenantId, companyId])
}

enum StockEntryType {
  PURCHASE
  SALE
  POSITIVE_ADJUST
  NEGATIVE_ADJUST
  TRANSFER
  CONSUMPTION
  OUTPUT
  ASSEMBLY_CONSUMPTION
  ASSEMBLY_OUTPUT
  NONE
}

enum StockHistoryDocumentType {
  SALES_SHIPMENT
  SALES_INVOICE
  SALES_RETURN_RECEIPT
  SALES_CREDIT_MEMO
  PURCHASE_RECEIPT
  PURCHASE_INVOICE
  PURCHASE_RETURN_SHIPMENT
  PURCHASE_CREDIT_MEMO
  TRANSFER_SHIPMENT
  TRANSFER_RECEIPT
  SERVICE_SHIPMENT
  SERVICE_INVOICE
  SERVICE_CREDIT_MEMO
  POSTED_ASSEMBLY
  INVENTORY_RECEIPT
  INVENTORY_SHIPMENT
  DIRECT_TRANSFER
  ADJUSTMENT
}

enum OrderTypeItemLedger {
  BLANK
  PRODUCTION
  TRANSFER
  SERVICE
  ASSEMBLY
}

model ProductTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  tagId     String   @db.ObjectId
  companyId String   @db.ObjectId
  tenantId  String   @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, companyId])
  @@unique([productId, tagId])
}

model Tag {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String       @unique
  productTags ProductTag[]
  companyId   String       @db.ObjectId
  tenantId    String       @db.ObjectId
  userId      String       @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  company     Company      @relation(fields: [companyId], references: [id])
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([tenantId, companyId])
}

model SalesHeader {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  customerId      String         @db.ObjectId
  customerName    String?
  customerPhone   String?
  customerEmail   String?
  orderNumber     String?
  orderDate       DateTime       @default(now())
  orderDueDate    DateTime?      @default(now())
  postingDate     DateTime?      @default(now())
  orderStatus     OrderStatus
  orderType       OrderType
  orderNote       String?
  orderAmount     Float
  orderDiscount   Float?
  orderTax        Float?
  orderTotal      Float
  orderPaidAmount Float?
  orderDueAmount  Float?
  paymentMethod   PaymentMethod?
  salesLines      SalesLine[]
  orderPayments   OrderPayment[]
  salesPersonId   String?        @db.ObjectId
  locationId      String?        @db.ObjectId
  userId          String?        @db.ObjectId
  companyId       String?        @db.ObjectId
  tenantId        String?        @db.ObjectId
  company         Company?       @relation(fields: [companyId], references: [id])
  tenant          Tenant?        @relation(fields: [tenantId], references: [id])
  salesPerson     SalesPerson?   @relation(fields: [salesPersonId], references: [id])
  location        Location?      @relation(fields: [locationId], references: [id])
  user            User?          @relation(fields: [userId], references: [id])
  customer        Customer?      @relation(fields: [customerId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([tenantId, companyId])
}

model SalesLine {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  salesHeaderId String      @db.ObjectId
  productId     String      @db.ObjectId
  productName   String
  productCode   String
  productSku    String
  productImage  String
  quantity      Int
  price         Float
  lineDiscount  Float?
  lineTax       Float?
  total         Float
  companyId     String?     @db.ObjectId
  tenantId      String?     @db.ObjectId
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  company       Company?    @relation(fields: [companyId], references: [id])
  tenant        Tenant?     @relation(fields: [tenantId], references: [id])
  salesHeader   SalesHeader @relation(fields: [salesHeaderId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([tenantId, companyId])
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
  CHEQUE
  BANK_TRANSFER
  CREDIT
}

model OrderPayment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  salesHeaderId String        @db.ObjectId
  amount        Float
  paymentMethod PaymentMethod
  paymentDate   DateTime?
  companyId     String?       @db.ObjectId
  tenantId      String?       @db.ObjectId
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id])
  company       Company?      @relation(fields: [companyId], references: [id])
  tenant        Tenant?       @relation(fields: [tenantId], references: [id])
  salesHeader   SalesHeader   @relation(fields: [salesHeaderId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([tenantId, companyId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OrderType {
  ONLINE
  OFFLINE
  BOTH
}

model Payee {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String   @unique
  email     String?
  companyId String   @db.ObjectId
  tenantId  String   @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, companyId])
}

enum NotificationType {
  INFO
  WARNING
  ERROR
}

enum NotificationStatus {
  UNREAD
  READ
}

model Notification {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  companyId String             @db.ObjectId
  tenantId  String             @db.ObjectId
  userId    String             @db.ObjectId
  user      User               @relation(fields: [userId], references: [id])
  company   Company            @relation(fields: [companyId], references: [id])
  tenant    Tenant             @relation(fields: [tenantId], references: [id])
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@unique([tenantId, companyId])
}

model Adjustment {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  referenceNo     String             @unique
  date            DateTime           @default(now())
  description     String?
  activity        AdjustmentActivity
  adjustmentLines AdjustmentLine[]
  companyId       String?            @db.ObjectId
  tenantId        String?            @db.ObjectId
  userId          String             @db.ObjectId
  user            User               @relation(fields: [userId], references: [id])
  company         Company?           @relation(fields: [companyId], references: [id])
  tenant          Tenant?            @relation(fields: [tenantId], references: [id])
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([tenantId, companyId])
}

model AdjustmentLine {
  id           String                  @id @default(auto()) @map("_id") @db.ObjectId
  postingDate  DateTime                @default(now())
  entryType    AdjustmentItemEntryType
  documentNo   String
  adjustmentId String                  @db.ObjectId
  productId    String                  @db.ObjectId
  productName  String
  productCode  String
  productSku   String
  locationId   String                  @db.ObjectId
  quantity     Int
  unitId       String                  @db.ObjectId
  reason       AdjustmentItemReason
  unitAmount   Float?
  totalAmount  Float?
  unitCost     Float?
  totalCost    Float?
  entryNo      Int                     @default(0)
  companyId    String                  @db.ObjectId
  tenantId     String                  @db.ObjectId
  userId       String                  @db.ObjectId
  user         User                    @relation(fields: [userId], references: [id])
  company      Company                 @relation(fields: [companyId], references: [id])
  tenant       Tenant                  @relation(fields: [tenantId], references: [id])
  adjustment   Adjustment              @relation(fields: [adjustmentId], references: [id])
  product      Product                 @relation(fields: [productId], references: [id])
  location     Location?               @relation(fields: [locationId], references: [id])
  unit         Unit                    @relation(fields: [unitId], references: [id])
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt

  @@unique([tenantId, companyId])
}

enum AdjustmentItemEntryType {
  PURCHASE
  SALE
  POSITIVE_ADJUST
  NEGATIVE_ADJUST
}

enum AdjustmentItemReason {
  EXPIRED_ITEM
  STOLEN_ITEM
  RETURNED_ITEM
  DAMAGED_ITEM
  OTHER
}

enum AdjustmentActivity {
  INVENTORY_COUNT
  INVENTORY_ADJUSTMENT
  INVENTORY_TRANSFER
  INVENTORY_CONSUMPTION
  INVENTORY_OUTPUT
  INVENTORY_ASSEMBLY_CONSUMPTION
  INVENTORY_ASSEMBLY_OUTPUT
}

model PurchaseHeader {
  id                  String                 @id @default(auto()) @map("_id") @db.ObjectId
  supplierId          String                 @db.ObjectId
  supplierName        String?
  supplierPhone       String?
  supplierEmail       String?
  documentNo          String?
  documentType        PurchaseDocumentType
  documentDate        DateTime               @default(now())
  dueDate             DateTime?              @default(now())
  postingDate         DateTime?              @default(now())
  status              PurchaseStatus?        @default(OPEN)
  paymentStatus       PurchasePaymentStatus? @default(PENDING)
  note                String?
  amount              Float                  @default(0)
  discountPercent     Float?                 @default(0)
  discountAmount      Float?                 @default(0)
  totalDiscount       Float?                 @default(0)
  taxPercent          Float?                 @default(0)
  taxAmount           Float?                 @default(0)
  totalAmount         Float                  @default(0)
  paidAmount          Float?                 @default(0)
  dueAmount           Float?                 @default(0)
  totalAmountInclTax  Float?                 @default(0)
  totalAmountExclTax  Float?                 @default(0)
  paymentMethod       PaymentMethod?
  purchaseLines       PurchaseLine[]
  SupplierLedgerEntry SupplierLedgerEntry[]
  locationId          String?                @db.ObjectId
  companyId           String?                @db.ObjectId
  tenantId            String?                @db.ObjectId
  userId              String                 @db.ObjectId
  user                User                   @relation(fields: [userId], references: [id])
  company             Company?               @relation(fields: [companyId], references: [id])
  tenant              Tenant?                @relation(fields: [tenantId], references: [id])
  location            Location?              @relation(fields: [locationId], references: [id])
  supplier            Supplier?              @relation(fields: [supplierId], references: [id])
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  @@unique([tenantId, companyId])
}

model PurchaseLine {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  purchaseHeaderId    String               @db.ObjectId
  documentType        PurchaseDocumentType
  documentNo          String?
  type                PurchaseLineType
  no_                 String               @db.ObjectId
  description         String
  code                String
  quantity            Int
  unitCost            Float
  unitId              String?              @db.ObjectId
  unitName            String?
  unitAbbreviation    String?
  lineAmount          Float
  lineDiscountPercent Float?
  lineDiscountAmount  Float?
  lineTaxPercent      Float?
  lineTaxAmount       Float?
  Amount              Float
  quantityToReceive   Int?                 @default(0)
  quantityToInvoice   Int?                 @default(0)
  quantityReceived    Int?                 @default(0)
  quantityInvoiced    Int?                 @default(0)
  AmountInclTax       Float?               @default(0)
  AmountExclTax       Float?               @default(0)
  lineNo              Int                  @unique @default(0)
  locationId          String?              @db.ObjectId
  locationName        String?
  locationSlug        String?
  supplierId          String?              @db.ObjectId
  supplierName        String?
  supplierPhone       String?
  supplierEmail       String?
  postingDate         DateTime?
  dueDate             DateTime?
  documentDate        DateTime?
  productId           String?              @db.ObjectId
  productName         String?
  productCode         String?
  productSlug         String?
  companyId           String?              @db.ObjectId
  tenantId            String?              @db.ObjectId
  userId              String               @db.ObjectId
  user                User                 @relation(fields: [userId], references: [id])
  company             Company?             @relation(fields: [companyId], references: [id])
  tenant              Tenant?              @relation(fields: [tenantId], references: [id])
  Product             Product?             @relation(fields: [productId], references: [id])
  location            Location?            @relation(fields: [locationId], references: [id])
  supplier            Supplier?            @relation(fields: [supplierId], references: [id])
  unit                Unit?                @relation(fields: [unitId], references: [id])
  purchaseHeader      PurchaseHeader       @relation(fields: [purchaseHeaderId], references: [id])
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@unique([tenantId, companyId])
}

enum PurchaseProcessStatus {
  PENDING
  PROCESSING
  RECEIVED
  CANCELLED
  PENDING_PAYMENT
}

enum PurchaseStatus {
  OPEN
  RELEASED
  PENDING_APPROVAL
  PENDING_PREPAYMENT
}

enum PurchasePaymentStatus {
  PENDING
  PAID
  PARTIAL
  CANCELLED
}

enum PurchaseDocumentType {
  QUOTE
  ORDER
  INVOICE
  CREDIT_MEMO
  BLANKET_ORDER
  RETURN_ORDER
}

enum PurchaseLineType {
  GL_ACCOUNT
  ITEM
  RESOURCE
  FIXED_ASSET
  ITEM_CHARGE
}

model SupplierLedgerEntry {
  id                        String                   @id @default(auto()) @map("_id") @db.ObjectId
  entryNo                   Int                      @unique @default(0)
  supplierId                String                   @db.ObjectId
  postingDate               DateTime
  documentType              LedgerEntryDocumentType
  documentNo                String                   @unique
  description               String
  supplierName              String
  supplierPhone             String
  supplierEmail             String
  currencyRate              Float?
  currencyCode              String?
  documentDate              DateTime
  amount                    Float
  amountLocal               Float?
  remainingAmount           Float?
  remainingAmountLocal      Float?
  externalDocumentNo        String?
  originalAmount            Float
  originalAmountLocal       Float?
  paidAmount                Float?
  paidAmountLocal           Float?
  invoiceDiscount           Float?
  invoiceDiscountLocal      Float?
  lineDiscount              Float?
  lineDiscountLocal         Float?
  totalInvoiceDiscount      Float?
  totalInvoiceDiscountLocal Float?
  vendorPostingGroupId      String?                  @db.ObjectId
  vendorPostingGroupCode    String?
  vendorPostingGroupName    String?
  dimension1                String?
  dimension2                String?
  purchaseCode              String?
  dimension3                String?
  dimension4                String?
  dimension5                String?
  dimension6                String?
  dimension7                String?
  dimension8                String?
  dimension9                String?
  dimension10               String?
  paymentMethod             PaymentMethod?
  dueDate                   DateTime?
  open                      Boolean                  @default(true)
  purchaseHeaderId          String?                  @db.ObjectId
  sourceCode                String?
  debitAmount               Float?
  debitAmountLocal          Float?
  creditAmount              Float?
  creditAmountLocal         Float?
  reversed                  Boolean                  @default(false)
  reversedEntryNo           Int?
  reversedByEntryNo         Int?
  adjustedCurrencyFactor    Float?
  originalCurrencyFactor    Float?
  closedByCurrencyCode      String?
  closedByAmount            Float?
  closedByAmountLocal       Float?
  closedByEntryNo           Int?
  closedByDate              DateTime?
  appliesToDocType          LedgerEntryDocumentType?
  appliesToDocNo            String?
  appliesToID               String?
  appliesToEntryNo          Int?
  appliesToDate             DateTime?
  transactionNo             String?
  journalBatchId            String?                  @db.ObjectId
  journalBatchName          String?
  journalBatchCode          String?
  Reason                    String?
  balAccountType            AccountType?
  balAccountNo              String?
  balAccountName            String?
  positive                  Boolean
  companyId                 String?                  @db.ObjectId
  tenantId                  String?                  @db.ObjectId
  userId                    String                   @db.ObjectId
  user                      User                     @relation(fields: [userId], references: [id])
  company                   Company?                 @relation(fields: [companyId], references: [id])
  tenant                    Tenant?                  @relation(fields: [tenantId], references: [id])
  purchaseHeader            PurchaseHeader?          @relation(fields: [purchaseHeaderId], references: [id])
  supplier                  Supplier                 @relation(fields: [supplierId], references: [id])
  vendorPostingGroup        VendorPostingGroup?      @relation(fields: [journalBatchId], references: [id])
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt

  @@unique([tenantId, companyId])
}

model VendorPostingGroup {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  code                  String                  @unique
  name                  String
  payableAccount        String?
  supplierLedgerEntries SupplierLedgerEntry[]
  PurchaseReceiptHeader PurchaseReceiptHeader[]
  Supplier              Supplier[]
  companyId             String?                 @db.ObjectId
  tenantId              String?                 @db.ObjectId
  userId                String                  @db.ObjectId
  user                  User                    @relation(fields: [userId], references: [id])
  company               Company?                @relation(fields: [companyId], references: [id])
  tenant                Tenant?                 @relation(fields: [tenantId], references: [id])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@unique([tenantId, companyId])
}

model CustomerPostingGroup {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  code              String     @unique
  name              String
  receivableAccount String?
  Customer          Customer[]
  companyId         String?    @db.ObjectId
  tenantId          String?    @db.ObjectId
  userId            String     @db.ObjectId
  user              User       @relation(fields: [userId], references: [id])
  company           Company?   @relation(fields: [companyId], references: [id])
  tenant            Tenant?    @relation(fields: [tenantId], references: [id])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@unique([tenantId, companyId])
}

model JournalBatch {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  description        String?
  journalTemplateId  String               @db.ObjectId
  noSeriesId         String?              @db.ObjectId
  companyId          String               @db.ObjectId
  tenantId           String               @db.ObjectId
  userId             String               @db.ObjectId
  user               User                 @relation(fields: [userId], references: [id])
  company            Company              @relation(fields: [companyId], references: [id])
  tenant             Tenant               @relation(fields: [tenantId], references: [id])
  journalTemplate    JournalTemplate      @relation(fields: [journalTemplateId], references: [id])
  NoSeries           NoSeries?            @relation(fields: [noSeriesId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  generalJournalLine generalJournalLine[]

  @@unique([tenantId, companyId])
  @@unique([name, journalTemplateId])
}

model JournalTemplate {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String               @unique
  description        String?
  type               journalTemplateType
  recurring          Boolean              @default(false)
  sourceCode         String?
  reasonCode         String?
  JournalBatch       JournalBatch[]
  companyId          String               @db.ObjectId
  tenantId           String               @db.ObjectId
  userId             String               @db.ObjectId
  user               User                 @relation(fields: [userId], references: [id])
  company            Company              @relation(fields: [companyId], references: [id])
  tenant             Tenant               @relation(fields: [tenantId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  generalJournalLine generalJournalLine[]

  @@unique([tenantId, companyId])
}

model generalJournalLine {
  id                       String                      @id @default(auto()) @map("_id") @db.ObjectId
  journalTemplateId        String                      @db.ObjectId
  journalBatchId           String                      @db.ObjectId
  lineNo                   Int                         @default(0)
  postingDate              DateTime
  documentType             JournalLineType
  documentNo               String?
  accountType              AccountType
  accountNo                String?
  accountName              String?
  accountCode              String?
  description              String?
  currencyCode             String?
  currencyRate             Float?
  currencyFactor           Float?
  amount                   Float
  amountLocal              Float?
  balAccountType           AccountType?
  balAccountNo             String?
  balAccountName           String?
  balAccountCode           String?
  externalDocumentNo       String?
  genPostingType           GenPostingType?
  genBusPostingGroupId     String?                     @db.ObjectId
  genProductPostingGroupId String?                     @db.ObjectId
  vatBusPostingGroupId     String?                     @db.ObjectId
  vatProductPostingGroupId String?                     @db.ObjectId
  sourceCode               String?
  sourceNo                 String?
  sourceType               String?
  reasonCode               String?
  comment                  String?
  appliesToDocType         LedgerEntryDocumentType?
  appliesToDocNo           String?
  appliesToID              String?
  dimension1               String?
  dimension2               String?
  dimension3               String?
  dimension4               String?
  dimension5               String?
  dimension6               String?
  dimension7               String?
  dimension8               String?
  dimension9               String?
  dimension10              String?
  companyId                String                      @db.ObjectId
  tenantId                 String                      @db.ObjectId
  userId                   String                      @db.ObjectId
  user                     User                        @relation(fields: [userId], references: [id])
  company                  Company                     @relation(fields: [companyId], references: [id])
  tenant                   Tenant                      @relation(fields: [tenantId], references: [id])
  JournalTemplate          JournalTemplate             @relation(fields: [journalTemplateId], references: [id])
  JournalBatch             JournalBatch                @relation(fields: [journalBatchId], references: [id])
  genBusPostingGroup       GenBusPostingGroup?         @relation(fields: [genBusPostingGroupId], references: [id])
  genProductPostingGroup   GeneralProductPostingGroup? @relation(fields: [genProductPostingGroupId], references: [id])
  vatBusPostingGroup       VatBusPostingGroup?         @relation(fields: [vatBusPostingGroupId], references: [id])
  vatProductPostingGroup   VatProductPostingGroup?     @relation(fields: [vatProductPostingGroupId], references: [id])
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime                    @updatedAt

  @@unique([tenantId, companyId])
}

enum GenPostingType {
  BLANK
  PURCHASE
  SALE
  SETTLEMENT
}

enum JournalLineType {
  BLANK
  PAYMENT
  INVOICE
  CREDIT_MEMO
  REFUND
  REMINDER
  FINANCE_CHARGE_MEMO
}

enum LedgerEntryDocumentType {
  BLANK
  PAYMENT
  INVOICE
  CREDIT_MEMO
  REFUND
  REMINDER
  FINANCE_CHARGE_MEMO
}

enum AccountType {
  GL_ACCOUNT
  CUSTOMER
  VENDOR
  BANK_ACCOUNT
  FIXED_ASSET
  EMPLOYEE
  ALLOCATION_ACCOUNT
  IC_PARTNER
}

enum journalTemplateType {
  ASSETS
  BANK_DEPOSIT
  CASH_RECEIPT
  GENERAL
  INTER_COMPANY
  JOBS
  PAYMENTS
  PURCHASES
  SALES
}

model PurchaseReceiptHeader {
  id                     String                @id @default(auto()) @map("_id") @db.ObjectId
  supplierId             String                @db.ObjectId
  supplierName           String?
  supplierPhone          String?
  supplierEmail          String?
  documentNo             String?
  documentDate           DateTime              @default(now())
  orderDate              DateTime              @default(now())
  postingDate            DateTime?             @default(now())
  dueDate                DateTime?             @default(now())
  promisedReceiptDate    DateTime?             @default(now())
  requestedReceiptDate   DateTime?             @default(now())
  orderNo                String?
  postingDescription     String?
  locationId             String?               @db.ObjectId
  dimension1             String?
  dimension2             String?
  dimension3             String?
  dimension4             String?
  dimension5             String?
  dimension6             String?
  dimension7             String?
  dimension8             String?
  dimension9             String?
  dimension10            String?
  vendorPostingGroupId   String?               @db.ObjectId
  vendorPostingGroupCode String?
  vendorPostingGroupName String?
  currencyCode           String?
  currencyRate           Float?
  currencyFactor         Float?
  sourceCode             String?
  invoiceDiscountCode    String?
  noPrinted              Int?
  noCopied               Int?
  noEmailed              Int?
  purchaseReceiptLines   PurchaseReceiptLine[]
  companyId              String?               @db.ObjectId
  tenantId               String?               @db.ObjectId
  userId                 String                @db.ObjectId
  user                   User                  @relation(fields: [userId], references: [id])
  company                Company?              @relation(fields: [companyId], references: [id])
  tenant                 Tenant?               @relation(fields: [tenantId], references: [id])
  location               Location?             @relation(fields: [locationId], references: [id])
  supplier               Supplier?             @relation(fields: [supplierId], references: [id])
  vendorPostingGroup     VendorPostingGroup?   @relation(fields: [vendorPostingGroupId], references: [id])
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt

  @@unique([tenantId, companyId])
}

model PurchaseReceiptLine {
  id                         String                 @id @default(auto()) @map("_id") @db.ObjectId
  purchaseReceiptHeaderId    String?                @db.ObjectId
  documentNo                 String?
  lineNo                     Int                    @unique @default(0)
  type                       PurchaseLineType
  no_                        String                 @unique @db.ObjectId
  description                String
  code                       String
  quantity                   Int
  directUnitCost             Float?
  totalUnitCost              Float?
  totalUnitCostLocal         Float?
  lineDiscountPercent        Float?
  lineDiscountAmount         Float?
  lineTaxPercent             Float?
  lineTaxAmount              Float?
  unitPriceLocal             Float?
  quantityInvoiced           Int?                   @default(0)
  orderNo                    String?
  orderLineNo                Int?
  postingDate                DateTime?
  dimension1                 String?
  dimension2                 String?
  dimension3                 String?
  dimension4                 String?
  dimension5                 String?
  dimension6                 String?
  dimension7                 String?
  dimension8                 String?
  dimension9                 String?
  dimension10                String?
  genBusPostingGroupId       String?                @db.ObjectId
  genBusPostingGroupCode     String?
  genBusPostingGroupName     String?
  genProductPostingGroupId   String?                @db.ObjectId
  genProductPostingGroupCode String?
  genProductPostingGroupName String?
  vatBusPostingGroupId       String?                @db.ObjectId
  vatBusPostingGroupCode     String?
  vatBusPostingGroupName     String?
  vatProductPostingGroupId   String?                @db.ObjectId
  vatProductPostingGroupCode String?
  vatProductPostingGroupName String?
  vatBaseAmount              Float?
  itemCategoryCode           String?
  nonStock                   Boolean?
  itemChargeBase             Float?
  correction                 Boolean?
  qtyPerUnitOfMeasure        Float?
  currencyCode               String?
  currencyRate               Float?
  currencyFactor             Float?
  sourceCode                 String?
  unitId                     String?                @db.ObjectId
  unitName                   String?
  unitAbbreviation           String?
  postingGroupId             String?                @db.ObjectId
  postingGroupCode           String?
  postingGroupName           String?
  expectedReceiptDate        DateTime?              @default(now())
  description2               String?
  description3               String?
  locationId                 String?                @db.ObjectId
  locationName               String?
  locationSlug               String?
  supplierId                 String?                @db.ObjectId
  supplierName               String?
  supplierPhone              String?
  supplierEmail              String?
  productId                  String?                @db.ObjectId
  productName                String?
  productCode                String?
  productSlug                String?
  companyId                  String?                @db.ObjectId
  tenantId                   String?                @db.ObjectId
  userId                     String                 @db.ObjectId
  user                       User                   @relation(fields: [userId], references: [id])
  company                    Company?               @relation(fields: [companyId], references: [id])
  tenant                     Tenant?                @relation(fields: [tenantId], references: [id])
  Product                    Product?               @relation(fields: [productId], references: [id])
  location                   Location?              @relation(fields: [locationId], references: [id])
  supplier                   Supplier?              @relation(fields: [supplierId], references: [id])
  unit                       Unit?                  @relation(fields: [unitId], references: [id])
  PurchaseReceiptHeader      PurchaseReceiptHeader? @relation(fields: [purchaseReceiptHeaderId], references: [id])
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt

  @@unique([tenantId, companyId])
}

model VatBusPostingGroup {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  code               String               @unique
  name               String
  Supplier           Supplier[]
  Customer           Customer[]
  VatPostingSetup    VatPostingSetup[]
  GenBusPostingGroup GenBusPostingGroup[]
  companyId          String?              @db.ObjectId
  tenantId           String?              @db.ObjectId
  userId             String               @db.ObjectId
  user               User                 @relation(fields: [userId], references: [id])
  company            Company?             @relation(fields: [companyId], references: [id])
  tenant             Tenant?              @relation(fields: [tenantId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ItemJournalLine    ItemJournalLine[]
  generalJournalLine generalJournalLine[]
  GeneralLedgerEntry GeneralLedgerEntry[]

  @@unique([tenantId, companyId])
}

model VatProductPostingGroup {
  id                         String                       @id @default(auto()) @map("_id") @db.ObjectId
  code                       String                       @unique
  name                       String
  Product                    Product[]
  VatPostingSetup            VatPostingSetup[]
  GeneralProductPostingGroup GeneralProductPostingGroup[]
  companyId                  String?                      @db.ObjectId
  tenantId                   String?                      @db.ObjectId
  userId                     String                       @db.ObjectId
  user                       User                         @relation(fields: [userId], references: [id])
  company                    Company?                     @relation(fields: [companyId], references: [id])
  tenant                     Tenant?                      @relation(fields: [tenantId], references: [id])
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  ItemJournalLine            ItemJournalLine[]
  generalJournalLine         generalJournalLine[]
  GeneralLedgerEntry         GeneralLedgerEntry[]

  @@unique([tenantId, companyId])
}

model VatPostingSetup {
  id                       String                  @id @default(auto()) @map("_id") @db.ObjectId
  description              String?
  vatBusPostingGroupId     String?                 @db.ObjectId
  vatProductPostingGroupId String?                 @db.ObjectId
  taxPercent               Float?
  vatIdentifier            String?
  salesVatAccount          String?
  purchaseVatAccount       String?
  blocked                  Boolean?                @default(false)
  companyId                String?                 @db.ObjectId
  tenantId                 String?                 @db.ObjectId
  userId                   String                  @db.ObjectId
  user                     User                    @relation(fields: [userId], references: [id])
  company                  Company?                @relation(fields: [companyId], references: [id])
  tenant                   Tenant?                 @relation(fields: [tenantId], references: [id])
  vatProductPostingGroup   VatProductPostingGroup? @relation(fields: [vatProductPostingGroupId], references: [id])
  vatBusPostingGroup       VatBusPostingGroup?     @relation(fields: [vatBusPostingGroupId], references: [id])
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt

  @@unique([tenantId, companyId])
  @@unique([vatBusPostingGroupId, vatProductPostingGroupId])
}

model GeneralProductPostingGroup {
  id                          String                  @id @default(auto()) @map("_id") @db.ObjectId
  code                        String                  @unique
  name                        String
  defVatProductPostingGroupId String?                 @db.ObjectId
  autoInsertDefault           Boolean?                @default(true)
  genPostingSetup             GenPostingSetup[]
  Product                     Product[]
  companyId                   String?                 @db.ObjectId
  tenantId                    String?                 @db.ObjectId
  userId                      String                  @db.ObjectId
  user                        User                    @relation(fields: [userId], references: [id])
  company                     Company?                @relation(fields: [companyId], references: [id])
  tenant                      Tenant?                 @relation(fields: [tenantId], references: [id])
  vatProductPostingGroup      VatProductPostingGroup? @relation(fields: [defVatProductPostingGroupId], references: [id])
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt
  ItemJournalLine             ItemJournalLine[]
  generalJournalLine          generalJournalLine[]
  GeneralLedgerEntry          GeneralLedgerEntry[]

  @@unique([tenantId, companyId])
}

model GenBusPostingGroup {
  id                      String               @id @default(auto()) @map("_id") @db.ObjectId
  code                    String               @unique
  name                    String
  defVatBusPostingGroupId String?              @db.ObjectId
  autoInsertDefault       Boolean?
  genPostingSetup         GenPostingSetup[]
  Supplier                Supplier[]
  Customer                Customer[]
  companyId               String?              @db.ObjectId
  tenantId                String?              @db.ObjectId
  userId                  String               @db.ObjectId
  user                    User                 @relation(fields: [userId], references: [id])
  company                 Company?             @relation(fields: [companyId], references: [id])
  tenant                  Tenant?              @relation(fields: [tenantId], references: [id])
  vatBusPostingGroup      VatBusPostingGroup?  @relation(fields: [defVatBusPostingGroupId], references: [id])
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  ItemJournalLine         ItemJournalLine[]
  generalJournalLine      generalJournalLine[]
  GeneralLedgerEntry      GeneralLedgerEntry[]

  @@unique([tenantId, companyId])
}

model GenPostingSetup {
  id                         String                      @id @default(auto()) @map("_id") @db.ObjectId
  description                String?
  genBusPostingGroupId       String?                     @db.ObjectId
  genProductPostingGroupId   String?                     @db.ObjectId
  blocked                    Boolean?                    @default(false)
  salesAccount               String?
  purchaseAccount            String?
  salesCreditMemoAccount     String?
  purchaseCreditMemoAccount  String?
  salesDiscountAccount       String?
  purchaseDiscountAccount    String?
  costOfGoodsSoldAccount     String?
  inventoryAdjustmentAccount String?
  companyId                  String?                     @db.ObjectId
  tenantId                   String?                     @db.ObjectId
  userId                     String                      @db.ObjectId
  user                       User                        @relation(fields: [userId], references: [id])
  company                    Company?                    @relation(fields: [companyId], references: [id])
  tenant                     Tenant?                     @relation(fields: [tenantId], references: [id])
  genProductPostingGroup     GeneralProductPostingGroup? @relation(fields: [genProductPostingGroupId], references: [id])
  genBusPostingGroup         GenBusPostingGroup?         @relation(fields: [genBusPostingGroupId], references: [id])
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt

  @@unique([tenantId, companyId])
  @@unique([genBusPostingGroupId, genProductPostingGroupId])
}

model InventoryPostingGroup {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  code                  String                  @unique
  name                  String
  InventoryPostingSetup InventoryPostingSetup[]
  Product               Product[]
  companyId             String                  @db.ObjectId
  tenantId              String                  @db.ObjectId
  userId                String                  @db.ObjectId
  user                  User                    @relation(fields: [userId], references: [id])
  company               Company                 @relation(fields: [companyId], references: [id])
  tenant                Tenant                  @relation(fields: [tenantId], references: [id])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  ItemJournalLine       ItemJournalLine[]

  @@unique([tenantId, companyId])
}

model InventoryPostingSetup {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  description             String?
  inventoryPostingGroupId String?                @db.ObjectId
  blocked                 Boolean?
  locationId              String?                @db.ObjectId
  inventoryAccount        String?
  companyId               String?                @db.ObjectId
  tenantId                String?                @db.ObjectId
  userId                  String                 @db.ObjectId
  user                    User                   @relation(fields: [userId], references: [id])
  company                 Company?               @relation(fields: [companyId], references: [id])
  tenant                  Tenant?                @relation(fields: [tenantId], references: [id])
  location                Location?              @relation(fields: [locationId], references: [id])
  inventoryPostingGroup   InventoryPostingGroup? @relation(fields: [inventoryPostingGroupId], references: [id])
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt

  @@unique([tenantId, companyId])
}

model NoSeries {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  code             String             @unique
  description      String
  defaultSeries    Boolean            @default(true)
  manualSeries     Boolean            @default(false)
  NoSeriesLine     NoSeriesLine[]
  JournalBatch     JournalBatch[]
  companyId        String             @db.ObjectId
  tenantId         String             @db.ObjectId
  userId           String             @db.ObjectId
  user             User               @relation(fields: [userId], references: [id])
  company          Company            @relation(fields: [companyId], references: [id])
  tenant           Tenant             @relation(fields: [tenantId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ItemJournalBatch ItemJournalBatch[]
  bankAccount      NoSeriesSetup[]    @relation("NoSeriesSetupBankAccount")
  vendor           NoSeriesSetup[]    @relation("NoSeriesSetupVendor")
  customer         NoSeriesSetup[]    @relation("NoSeriesSetupCustomer")
  contactNo        NoSeriesSetup[]    @relation("NoSeriesSetupContact")

  @@unique([tenantId, companyId, code])
}

model NoSeriesLine {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  noSeriesId    String    @db.ObjectId
  startingDate  DateTime?
  endingDate    DateTime?
  startingNo    String
  endingNo      String?
  lastDateUsed  DateTime? @default(now())
  lastNoUsed    String?
  lastDigitUsed Int?
  increment     Int?      @default(1)
  companyId     String    @db.ObjectId
  tenantId      String    @db.ObjectId
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  company       Company   @relation(fields: [companyId], references: [id])
  tenant        Tenant    @relation(fields: [tenantId], references: [id])
  noSeries      NoSeries  @relation(fields: [noSeriesId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([tenantId, companyId, noSeriesId, startingNo])
}

model NoSeriesSetup {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  customerNos    String?   @db.ObjectId
  vendorNos      String?   @db.ObjectId
  bankAccountNos String?   @db.ObjectId
  contactNos     String?   @db.ObjectId
  companyId      String    @db.ObjectId
  tenantId       String    @db.ObjectId
  userId         String    @db.ObjectId
  contactNo      NoSeries? @relation(name: "NoSeriesSetupContact", fields: [contactNos], references: [id])
  bankAccountNo  NoSeries? @relation(name: "NoSeriesSetupBankAccount", fields: [bankAccountNos], references: [id])
  vendorNo       NoSeries? @relation(name: "NoSeriesSetupVendor", fields: [vendorNos], references: [id])
  customerNo     NoSeries? @relation(name: "NoSeriesSetupCustomer", fields: [customerNos], references: [id])
  user           User      @relation(fields: [userId], references: [id])
  company        Company   @relation(fields: [companyId], references: [id])
  tenant         Tenant    @relation(fields: [tenantId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([tenantId, companyId, id])
}

model Tenant {
  id                         String                       @id @default(auto()) @map("_id") @db.ObjectId
  name                       String
  Company                    Company[]
  companyInformation         companyInformation[]
  OnlineOrderSetup           OnlineOrderSetup[]
  NoSeriesSetup              NoSeriesSetup[]
  NoSeriesLine               NoSeriesLine[]
  NoSeries                   NoSeries[]
  InventoryPostingSetup      InventoryPostingSetup[]
  InventoryPostingGroup      InventoryPostingGroup[]
  GenPostingSetup            GenPostingSetup[]
  GenBusPostingGroup         GenBusPostingGroup[]
  GeneralProductPostingGroup GeneralProductPostingGroup[]
  VatPostingSetup            VatPostingSetup[]
  VatProductPostingGroup     VatProductPostingGroup[]
  VatBusPostingGroup         VatBusPostingGroup[]
  PurchaseReceiptLine        PurchaseReceiptLine[]
  PurchaseReceiptHeader      PurchaseReceiptHeader[]
  JournalTemplate            JournalTemplate[]
  JournalBatch               JournalBatch[]
  CustomerPostingGroup       CustomerPostingGroup[]
  VendorPostingGroup         VendorPostingGroup[]
  SupplierLedgerEntry        SupplierLedgerEntry[]
  PurchaseLine               PurchaseLine[]
  PurchaseHeader             PurchaseHeader[]
  AdjustmentLine             AdjustmentLine[]
  Adjustment                 Adjustment[]
  Notification               Notification[]
  Payee                      Payee[]
  OrderPayment               OrderPayment[]
  SalesLine                  SalesLine[]
  SalesHeader                SalesHeader[]
  Tag                        Tag[]
  ProductTag                 ProductTag[]
  StockHistory               StockHistory[]
  ProductVariant             ProductVariant[]
  Product                    Product[]
  Category                   Category[]
  Brand                      Brand[]
  Unit                       Unit[]
  Supplier                   Supplier[]
  location                   Location[]
  User                       User[]
  SalesPerson                SalesPerson[]
  Customer                   Customer[]
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  ItemJournalTemplate        ItemJournalTemplate[]
  ItemJournalBatch           ItemJournalBatch[]
  ItemJournalLine            ItemJournalLine[]
  generalJournalLine         generalJournalLine[]
  GeneralLedgerEntry         GeneralLedgerEntry[]
  BankAccount                BankAccount[]
  BankAccountPostingGroup    BankAccountPostingGroup[]
  BankAccountLedgerEntry     BankAccountLedgerEntry[]
  GLAccount                  GLAccount[]
  UserCompany                UserCompany[]
  Contact                    Contact[]
  CustomerContact            CustomerContact[]
  SupplierContact            SupplierContact[]

  CurrencyExchangeRate CurrencyExchangeRate[]

  CustomerPriceGroup CustomerPriceGroup[]
}

model Company {
  id                         String                       @id @default(auto()) @map("_id") @db.ObjectId
  code                       String
  name                       String
  tenantId                   String                       @db.ObjectId
  companyInformation         companyInformation[]
  OnlineOrderSetup           OnlineOrderSetup[]
  NoSeriesSetup              NoSeriesSetup[]
  NoSeriesLine               NoSeriesLine[]
  NoSeries                   NoSeries[]
  InventoryPostingSetup      InventoryPostingSetup[]
  InventoryPostingGroup      InventoryPostingGroup[]
  GenPostingSetup            GenPostingSetup[]
  GenBusPostingGroup         GenBusPostingGroup[]
  GeneralProductPostingGroup GeneralProductPostingGroup[]
  VatPostingSetup            VatPostingSetup[]
  VatProductPostingGroup     VatProductPostingGroup[]
  VatBusPostingGroup         VatBusPostingGroup[]
  PurchaseReceiptLine        PurchaseReceiptLine[]
  PurchaseReceiptHeader      PurchaseReceiptHeader[]
  JournalTemplate            JournalTemplate[]
  JournalBatch               JournalBatch[]
  CustomerPostingGroup       CustomerPostingGroup[]
  VendorPostingGroup         VendorPostingGroup[]
  SupplierLedgerEntry        SupplierLedgerEntry[]
  PurchaseLine               PurchaseLine[]
  PurchaseHeader             PurchaseHeader[]
  AdjustmentLine             AdjustmentLine[]
  Adjustment                 Adjustment[]
  Notification               Notification[]
  Payee                      Payee[]
  OrderPayment               OrderPayment[]
  SalesLine                  SalesLine[]
  SalesHeader                SalesHeader[]
  Tag                        Tag[]
  ProductTag                 ProductTag[]
  StockHistory               StockHistory[]
  ProductVariant             ProductVariant[]
  Product                    Product[]
  Category                   Category[]
  Brand                      Brand[]
  Unit                       Unit[]
  Supplier                   Supplier[]
  location                   Location[]
  SalesPerson                SalesPerson[]
  Customer                   Customer[]
  tenant                     Tenant                       @relation(fields: [tenantId], references: [id])
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  ItemJournalTemplate        ItemJournalTemplate[]
  ItemJournalBatch           ItemJournalBatch[]
  ItemJournalLine            ItemJournalLine[]
  generalJournalLine         generalJournalLine[]
  GeneralLedgerEntry         GeneralLedgerEntry[]
  BankAccount                BankAccount[]
  BankAccountPostingGroup    BankAccountPostingGroup[]
  BankAccountLedgerEntry     BankAccountLedgerEntry[]
  GLAccount                  GLAccount[]
  UserCompany                UserCompany[]
  Contact                    Contact[]
  CustomerContact            CustomerContact[]
  SupplierContact            SupplierContact[]
  CurrencyExchangeRate       CurrencyExchangeRate[]
  CustomerPriceGroup         CustomerPriceGroup[]

  @@unique([tenantId, code])
}

model companyInformation {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  address           String?
  address_2         String?
  city              String?
  state             String?
  zip               String?
  country           String?
  contactName       String?
  phone             String?
  email             String?
  website           String?
  fax               String?
  taxRegNo          String?
  logo              String?
  bankName          String?
  bankCode          String?
  bankBranch        String?
  bankAccountNumber String?
  bankAccountName   String?
  swiftCode         String?
  companyId         String   @db.ObjectId
  tenantId          String   @db.ObjectId
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  company           Company  @relation(fields: [companyId], references: [id])
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([tenantId, companyId])
}

model UserCompany {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  companyId String   @db.ObjectId
  tenantId  String   @db.ObjectId
  active    Boolean?
  user      User     @relation(fields: [userId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@unique([userId, companyId])
  @@unique([tenantId, companyId])
}

model OnlineOrderSetup {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId String   @db.ObjectId
  tenantId   String   @db.ObjectId
  companyId  String   @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  company    Company  @relation(fields: [companyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([tenantId, companyId])
}

model ItemJournalTemplate {
  id               String                  @id @default(auto()) @map("_id") @db.ObjectId
  name             String                  @unique
  description      String?
  type             ItemJournalTemplateType
  recurring        Boolean                 @default(false)
  sourceCode       String?
  reasonCode       String?
  companyId        String                  @db.ObjectId
  tenantId         String                  @db.ObjectId
  ItemJournalBatch ItemJournalBatch[]
  ItemJournalLine  ItemJournalLine[]
  userId           String                  @db.ObjectId
  user             User                    @relation(fields: [userId], references: [id])
  company          Company                 @relation(fields: [companyId], references: [id])
  tenant           Tenant                  @relation(fields: [tenantId], references: [id])
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt

  @@unique([tenantId, companyId])
}

model ItemJournalBatch {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  description           String?
  itemJournalTemplateId String              @db.ObjectId
  noSeriesId            String?             @db.ObjectId
  companyId             String              @db.ObjectId
  tenantId              String              @db.ObjectId
  ItemJournalLine       ItemJournalLine[]
  userId                String              @db.ObjectId
  user                  User                @relation(fields: [userId], references: [id])
  company               Company             @relation(fields: [companyId], references: [id])
  tenant                Tenant              @relation(fields: [tenantId], references: [id])
  itemJournalTemplate   ItemJournalTemplate @relation(fields: [itemJournalTemplateId], references: [id])
  NoSeries              NoSeries?           @relation(fields: [noSeriesId], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@unique([tenantId, companyId])
  @@unique([name, itemJournalTemplateId])
}

enum ItemJournalTemplateType {
  ITEM
  TRANSFER
  PHYS_INVENTORY
  REVALUATION
  CONSUMPTION
  OUTPUT
  CAPACITY
  PROD_ORDER
}

model ItemJournalLine {
  id                       String                      @id @default(auto()) @map("_id") @db.ObjectId
  itemJournalTemplateId    String                      @db.ObjectId
  itemJournalBatchId       String                      @db.ObjectId
  lineNo                   Int                         @default(0)
  postingDate              DateTime
  entryType                ItemJournalEntryType
  documentNo               String?
  itemId                   String                      @db.ObjectId
  description              String?
  inventoryPostingGroupId  String?                     @db.ObjectId
  locationId               String?                     @db.ObjectId
  quantity                 Float
  unitId                   String?                     @db.ObjectId
  unitAmount               Float?
  totalAmount              Float?
  unitCost                 Float?
  totalCost                Float?
  sourceCode               String?
  sourceNo                 String?
  sourceType               String?
  reasonCode               String?
  documentDate             DateTime?
  qtyPerUnitOfMeasure      Float?
  currencyCode             String?
  currencyRate             Float?
  currencyFactor           Float?
  genBusPostingGroupId     String?                     @db.ObjectId
  genProductPostingGroupId String?                     @db.ObjectId
  vatBusPostingGroupId     String?                     @db.ObjectId
  vatProductPostingGroupId String?                     @db.ObjectId
  companyId                String                      @db.ObjectId
  tenantId                 String                      @db.ObjectId
  userId                   String                      @db.ObjectId
  user                     User                        @relation(fields: [userId], references: [id])
  company                  Company                     @relation(fields: [companyId], references: [id])
  tenant                   Tenant                      @relation(fields: [tenantId], references: [id])
  item                     Product                     @relation(fields: [itemId], references: [id])
  location                 Location?                   @relation(fields: [locationId], references: [id])
  inventoryPostingGroup    InventoryPostingGroup?      @relation(fields: [inventoryPostingGroupId], references: [id])
  ItemJournalTemplate      ItemJournalTemplate         @relation(fields: [itemJournalTemplateId], references: [id])
  ItemJournalBatch         ItemJournalBatch            @relation(fields: [itemJournalBatchId], references: [id])
  unit                     Unit?                       @relation(fields: [unitId], references: [id])
  genBusPostingGroup       GenBusPostingGroup?         @relation(fields: [genBusPostingGroupId], references: [id])
  genProductPostingGroup   GeneralProductPostingGroup? @relation(fields: [genProductPostingGroupId], references: [id])
  vatBusPostingGroup       VatBusPostingGroup?         @relation(fields: [vatBusPostingGroupId], references: [id])
  vatProductPostingGroup   VatProductPostingGroup?     @relation(fields: [vatProductPostingGroupId], references: [id])
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime                    @updatedAt

  @@unique([tenantId, companyId])
}

enum ItemJournalEntryType {
  PURCHASE
  SALE
  POSITIVE_ADJUST
  NEGATIVE_ADJUST
}

model GeneralLedgerEntry {
  id                       String                      @id @default(auto()) @map("_id") @db.ObjectId
  postingDate              DateTime
  documentType             LedgerEntryDocumentType
  documentNo               String?
  accountType              AccountType
  accountNo                String?
  accountName              String?
  accountCode              String?
  description              String?
  currencyCode             String?
  currencyRate             Float?
  currencyFactor           Float?
  amount                   Float
  amountLocal              Float?
  balAccountType           AccountType?
  balAccountNo             String?
  balAccountName           String?
  balAccountCode           String?
  externalDocumentNo       String?
  genPostingType           GenPostingType?
  genBusPostingGroupId     String?                     @db.ObjectId
  genProductPostingGroupId String?                     @db.ObjectId
  vatBusPostingGroupId     String?                     @db.ObjectId
  vatProductPostingGroupId String?                     @db.ObjectId
  sourceCode               String?
  sourceNo                 String?
  sourceType               String?
  reasonCode               String?
  comment                  String?
  appliesToDocType         LedgerEntryDocumentType?
  appliesToDocNo           String?
  appliesToID              String?
  dimension1               String?
  dimension2               String?
  dimension3               String?
  dimension4               String?
  dimension5               String?
  dimension6               String?
  dimension7               String?
  dimension8               String?
  dimension9               String?
  dimension10              String?
  entryNo                  Int                         @default(0)
  companyId                String                      @db.ObjectId
  tenantId                 String                      @db.ObjectId
  userId                   String                      @db.ObjectId
  user                     User                        @relation(fields: [userId], references: [id])
  company                  Company                     @relation(fields: [companyId], references: [id])
  tenant                   Tenant                      @relation(fields: [tenantId], references: [id])
  genBusPostingGroup       GenBusPostingGroup?         @relation(fields: [genBusPostingGroupId], references: [id])
  genProductPostingGroup   GeneralProductPostingGroup? @relation(fields: [genProductPostingGroupId], references: [id])
  vatBusPostingGroup       VatBusPostingGroup?         @relation(fields: [vatBusPostingGroupId], references: [id])
  vatProductPostingGroup   VatProductPostingGroup?     @relation(fields: [vatProductPostingGroupId], references: [id])
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime                    @updatedAt

  @@unique([tenantId, companyId])
}

model BankAccount {
  id                        String                   @id @default(auto()) @map("_id") @db.ObjectId
  bankCode                  String
  name                      String
  iban                      String?
  bic                       String?
  swiftCode                 String?
  accountNumber             String?
  bankBranchNo              String?
  blocked                   Boolean?
  bankAddress               String?
  bankAddress2              String?
  bankCountry               String?
  bankCountryCode           String?
  bankPostalCode            String?
  bankCity                  String?
  email                     String?
  phone                     String?
  contactPerson             String?
  contactEmail              String?
  contactPhone              String?
  homePage                  String?
  currencyCode              String?
  lastStatementNumber       String?
  lastStatementDate         DateTime?
  lastStatementBalance      Float?
  banKAccountPostingGroupId String?                  @db.ObjectId
  tenantId                  String                   @db.ObjectId
  companyId                 String                   @db.ObjectId
  userId                    String                   @db.ObjectId
  user                      User                     @relation(fields: [userId], references: [id])
  company                   Company                  @relation(fields: [companyId], references: [id])
  tenant                    Tenant                   @relation(fields: [tenantId], references: [id])
  banKAccountPostingGroup   BankAccountPostingGroup? @relation(fields: [banKAccountPostingGroupId], references: [id])
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt

  @@unique([tenantId, companyId])
  @@unique([tenantId, companyId, bankCode])
}

model BankAccountPostingGroup {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  code        String        @unique
  description String
  GLAccount   String?
  BankAccount BankAccount[]
  companyId   String        @db.ObjectId
  tenantId    String        @db.ObjectId
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  company     Company       @relation(fields: [companyId], references: [id])
  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([tenantId, companyId])
  @@unique([tenantId, companyId, code])
}

model BankAccountLedgerEntry {
  id                 String                  @id @default(auto()) @map("_id") @db.ObjectId
  postingDate        DateTime
  documentType       LedgerEntryDocumentType
  documentNo         String?
  bankAccountId      String                  @db.ObjectId
  description        String?
  currencyCode       String?
  currencyRate       Float?
  currencyFactor     Float?
  amount             Float
  amountLocal        Float?
  runningAmount      Float?
  runningAmountLocal Float?
  entryNo            Int                     @default(0)
  open               Boolean                 @default(true)
  externalDocumentNo String?
  sourceCode         String?
  sourceNo           String?
  sourceType         String?
  reasonCode         String?
  comment            String?
  dimension1         String?
  dimension2         String?
  dimension3         String?
  dimension4         String?
  dimension5         String?
  dimension6         String?
  dimension7         String?
  dimension8         String?
  dimension9         String?
  dimension10        String?
  companyId          String                  @db.ObjectId
  tenantId           String                  @db.ObjectId
  userId             String                  @db.ObjectId
  user               User                    @relation(fields: [userId], references: [id])
  company            Company                 @relation(fields: [companyId], references: [id])
  tenant             Tenant                  @relation(fields: [tenantId], references: [id])
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt

  @@unique([tenantId, companyId])
}

model GLAccount {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  no                       String            @unique
  name                     String?
  searchName               String?
  accountType              GLAccountType
  accountCategory          GLAccountCategory
  incomeBalance            IncomeBalanceType
  debit_credit             DebitCreditType
  no_2                     String?
  blocked                  Boolean?
  directPosting            Boolean?
  reconciliationAccount    Boolean?
  indentation              Int?
  totaling                 String?
  genPostingType           GenPostingType?
  genBusPostingGroupId     String?           @db.ObjectId
  genProductPostingGroupId String?           @db.ObjectId
  vatBusPostingGroupId     String?           @db.ObjectId
  vatProductPostingGroupId String?           @db.ObjectId
  picture                  String?
  exchangeRateAdjustment   String?
  balanceAtDate            Float?            @default(0)
  newPage                  Boolean?
  balance                  Float?
  balanceLocal             Float?
  dimension1               String?
  dimension2               String?
  dimension3               String?
  dimension4               String?
  dimension5               String?
  dimension6               String?
  dimension7               String?
  dimension8               String?
  dimension9               String?
  dimension10              String?
  companyId                String            @db.ObjectId
  tenantId                 String            @db.ObjectId
  userId                   String            @db.ObjectId
  user                     User              @relation(fields: [userId], references: [id])
  tenant                   Tenant            @relation(fields: [tenantId], references: [id])
  company                  Company           @relation(fields: [companyId], references: [id])
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
}

enum GLAccountType {
  POSTING
  HEADING
  BEGIN_TOTAL
  END_TOTAL
  TOTAL
}

enum GLAccountCategory {
  ASSET
  LIABILITY
  EQUITY
  INCOME
  COST_OF_GOODS_SOLD
  EXPENSE
}

enum IncomeBalanceType {
  INCOME_STATEMENT
  BALANCE_SHEET
}

enum DebitCreditType {
  DEBIT
  CREDIT
  BOTH
}
